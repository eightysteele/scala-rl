Index.PACKAGES = {"com.scalarl.policy" : [{"name" : "com.scalarl.policy.Greedy", "shortDescription" : "Base logic for greedy policies.", "object" : "com\/scalarl\/policy\/Greedy$.html", "members_class" : [{"label" : "choose", "tail" : "(state: State[Obs, A, R, S]): Cat[A]", "member" : "com.scalarl.policy.Greedy.choose", "link" : "com\/scalarl\/policy\/Greedy.html#choose(state:com.scalarl.State[Obs,A,R,S]):com.scalarl.Cat[A]", "kind" : "def"}, {"member" : "com.scalarl.policy.Greedy#<init>", "error" : "unsupported entity"}, {"label" : "mapK", "tail" : "(f: FunctionK[Cat, N]): Policy[Obs, A, R, N, S]", "member" : "com.scalarl.Policy.mapK", "link" : "com\/scalarl\/policy\/Greedy.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N]):com.scalarl.Policy[Obs,A,R,N,S]", "kind" : "def"}, {"label" : "contramapReward", "tail" : "(f: (T) ⇒ R)(S: Functor[S]): Policy[Obs, A, T, Cat, S]", "member" : "com.scalarl.Policy.contramapReward", "link" : "com\/scalarl\/policy\/Greedy.html#contramapReward[T](f:T=>R)(implicitS:cats.Functor[S]):com.scalarl.Policy[Obs,A,T,M,S]", "kind" : "def"}, {"label" : "contramapObservation", "tail" : "(f: (P) ⇒ Obs)(S: Functor[S]): Policy[P, A, R, Cat, S]", "member" : "com.scalarl.Policy.contramapObservation", "link" : "com\/scalarl\/policy\/Greedy.html#contramapObservation[P](f:P=>Obs)(implicitS:cats.Functor[S]):com.scalarl.Policy[P,A,R,M,S]", "kind" : "def"}, {"label" : "learn", "tail" : "(sars: SARS[Obs, A, R, S]): This", "member" : "com.scalarl.Policy.learn", "link" : "com\/scalarl\/policy\/Greedy.html#learn(sars:com.scalarl.SARS[Obs,A,R,S]):Policy.this.This", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Policy.This", "link" : "com\/scalarl\/policy\/Greedy.html#This=com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/Greedy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/Greedy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/Greedy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/Greedy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/Greedy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/Greedy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/Greedy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/Greedy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/Greedy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/policy\/Greedy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/Greedy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/policy\/Greedy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/policy\/Greedy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/Greedy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/Greedy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/Greedy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Config", "tail" : "", "member" : "com.scalarl.policy.Greedy.Config", "link" : "com\/scalarl\/policy\/Greedy$.html#Config[R,T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/Greedy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/Greedy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/Greedy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/Greedy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/Greedy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/Greedy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/Greedy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/Greedy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/Greedy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/Greedy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/policy\/Greedy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/Greedy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/policy\/Greedy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/policy\/Greedy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/Greedy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/Greedy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/Greedy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/scalarl\/policy\/Greedy.html", "kind" : "class"}], "com.scalarl.rainier" : [{"name" : "com.scalarl.rainier.Categorical", "shortDescription" : "A finite discrete distribution.", "object" : "com\/scalarl\/rainier\/Categorical$.html", "members_object" : [{"label" : "softmax", "tail" : "(as: Set[A])(arg0: ToDouble[A]): Categorical[A]", "member" : "com.scalarl.rainier.Categorical.softmax", "link" : "com\/scalarl\/rainier\/Categorical$.html#softmax[A](as:Set[A])(implicitevidence$1:com.scalarl.algebra.ToDouble[A]):com.scalarl.rainier.Categorical[A]", "kind" : "def"}, {"label" : "softmax", "tail" : "(m: Map[A, Double]): Categorical[A]", "member" : "com.scalarl.rainier.Categorical.softmax", "link" : "com\/scalarl\/rainier\/Categorical$.html#softmax[A,B](m:Map[A,Double]):com.scalarl.rainier.Categorical[A]", "kind" : "def"}, {"label" : "fromSet", "tail" : "(ts: Set[T]): Categorical[T]", "member" : "com.scalarl.rainier.Categorical.fromSet", "link" : "com\/scalarl\/rainier\/Categorical$.html#fromSet[T](ts:Set[T]):com.scalarl.rainier.Categorical[T]", "kind" : "def"}, {"label" : "seq", "tail" : "(ts: Seq[T]): Categorical[T]", "member" : "com.scalarl.rainier.Categorical.seq", "link" : "com\/scalarl\/rainier\/Categorical$.html#seq[T](ts:Seq[T]):com.scalarl.rainier.Categorical[T]", "kind" : "def"}, {"label" : "normalize", "tail" : "(pmf: Map[T, Double]): Categorical[T]", "member" : "com.scalarl.rainier.Categorical.normalize", "link" : "com\/scalarl\/rainier\/Categorical$.html#normalize[T](pmf:Map[T,Double]):com.scalarl.rainier.Categorical[T]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Categorical[A]", "member" : "com.scalarl.rainier.Categorical.pure", "link" : "com\/scalarl\/rainier\/Categorical$.html#pure[A](a:A):com.scalarl.rainier.Categorical[A]", "kind" : "def"}, {"label" : "boolean", "tail" : "(p: Double): Categorical[Boolean]", "member" : "com.scalarl.rainier.Categorical.boolean", "link" : "com\/scalarl\/rainier\/Categorical$.html#boolean(p:Double):com.scalarl.rainier.Categorical[Boolean]", "kind" : "def"}, {"label" : "poisson", "tail" : "(upperBound: Int, mean: Lambda): Categorical[Int]", "member" : "com.scalarl.rainier.Categorical.poisson", "link" : "com\/scalarl\/rainier\/Categorical$.html#poisson(upperBound:Int,mean:com.scalarl.rainier.Categorical.Poisson.Lambda):com.scalarl.rainier.Categorical[Int]", "kind" : "def"}, {"label" : "Poisson", "tail" : "", "member" : "com.scalarl.rainier.Categorical.Poisson", "link" : "com\/scalarl\/rainier\/Categorical$.html#Poisson", "kind" : "object"}, {"label" : "apply", "tail" : "(pmf: Map[T, Double]): Categorical[T]", "member" : "com.scalarl.rainier.Categorical.apply", "link" : "com\/scalarl\/rainier\/Categorical$.html#apply[T](pmf:Map[T,Double]):com.scalarl.rainier.Categorical[T]", "kind" : "def"}, {"label" : "catToGenerator", "tail" : ": FunctionK[Categorical, Generator]", "member" : "com.scalarl.rainier.CategoricalInstances.catToGenerator", "link" : "com\/scalarl\/rainier\/Categorical$.html#catToGenerator:cats.arrow.FunctionK[com.scalarl.rainier.Categorical,com.stripe.rainier.core.Generator]", "kind" : "val"}, {"label" : "toRainierCategorical", "tail" : ": FunctionK[Categorical, stripe.rainier.core.Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.toRainierCategorical", "link" : "com\/scalarl\/rainier\/Categorical$.html#toRainierCategorical:cats.arrow.FunctionK[com.scalarl.rainier.Categorical,com.stripe.rainier.core.Categorical]", "kind" : "val"}, {"label" : "setToCategorical", "tail" : ": FunctionK[Set, Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.setToCategorical", "link" : "com\/scalarl\/rainier\/Categorical$.html#setToCategorical:cats.arrow.FunctionK[Set,com.scalarl.rainier.Categorical]", "kind" : "val"}, {"label" : "gen", "tail" : "(): ToGenerator[Categorical[T], T]", "member" : "com.scalarl.rainier.CategoricalInstances.gen", "link" : "com\/scalarl\/rainier\/Categorical$.html#gen[T]:com.stripe.rainier.core.ToGenerator[com.scalarl.rainier.Categorical[T],T]", "kind" : "implicit def"}, {"label" : "catMonoid", "tail" : "(arg0: Monoid[A]): Monoid[Categorical[A]]", "member" : "com.scalarl.rainier.CategoricalInstances.catMonoid", "link" : "com\/scalarl\/rainier\/Categorical$.html#catMonoid[A](implicitevidence$2:cats.Monoid[A]):cats.Monoid[com.scalarl.rainier.Categorical[A]]", "kind" : "implicit def"}, {"label" : "catMonad", "tail" : ": Monad[Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.catMonad", "link" : "com\/scalarl\/rainier\/Categorical$.html#catMonad:cats.Monad[com.scalarl.rainier.Categorical]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/rainier\/Categorical$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/rainier\/Categorical$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/rainier\/Categorical$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/rainier\/Categorical$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/rainier\/Categorical$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/rainier\/Categorical$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/rainier\/Categorical$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/rainier\/Categorical$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/rainier\/Categorical$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/rainier\/Categorical$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/rainier\/Categorical$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/rainier\/Categorical$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/rainier\/Categorical$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/rainier\/Categorical$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/rainier\/Categorical$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/rainier\/Categorical$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toRainier", "tail" : "(): stripe.rainier.core.Categorical[U]", "member" : "com.scalarl.rainier.Categorical.toRainier", "link" : "com\/scalarl\/rainier\/Categorical.html#toRainier[U>:T]:com.stripe.rainier.core.Categorical[U]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: Categorical[U]): Categorical[(T, U)]", "member" : "com.scalarl.rainier.Categorical.zip", "link" : "com\/scalarl\/rainier\/Categorical.html#zip[U](other:com.scalarl.rainier.Categorical[U]):com.scalarl.rainier.Categorical[(T,U)]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fn: (T) ⇒ Categorical[U]): Categorical[U]", "member" : "com.scalarl.rainier.Categorical.flatMap", "link" : "com\/scalarl\/rainier\/Categorical.html#flatMap[U](fn:T=>com.scalarl.rainier.Categorical[U]):com.scalarl.rainier.Categorical[U]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (T) ⇒ U): Categorical[U]", "member" : "com.scalarl.rainier.Categorical.map", "link" : "com\/scalarl\/rainier\/Categorical.html#map[U](fn:T=>U):com.scalarl.rainier.Categorical[U]", "kind" : "def"}, {"label" : "pmf", "tail" : "(): Map[U, Double]", "member" : "com.scalarl.rainier.Categorical.pmf", "link" : "com\/scalarl\/rainier\/Categorical.html#pmf[U>:T]:Map[U,Double]", "kind" : "def"}, {"member" : "com.scalarl.rainier.Categorical#<init>", "error" : "unsupported entity"}, {"label" : "pmfSeq", "tail" : ": List[(T, Double)]", "member" : "com.scalarl.rainier.Categorical.pmfSeq", "link" : "com\/scalarl\/rainier\/Categorical.html#pmfSeq:List[(T,Double)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/rainier\/Categorical.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/rainier\/Categorical.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/rainier\/Categorical.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/rainier\/Categorical.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/rainier\/Categorical.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/rainier\/Categorical.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/rainier\/Categorical.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/Categorical.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/rainier\/Categorical.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/rainier\/Categorical.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/rainier\/Categorical.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/rainier\/Categorical.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/rainier\/Categorical.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/rainier\/Categorical.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/rainier\/Categorical.html", "kind" : "case class"}, {"name" : "com.scalarl.rainier.CategoricalInstances", "members_trait" : [{"label" : "catToGenerator", "tail" : ": FunctionK[Categorical, Generator]", "member" : "com.scalarl.rainier.CategoricalInstances.catToGenerator", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#catToGenerator:cats.arrow.FunctionK[com.scalarl.rainier.Categorical,com.stripe.rainier.core.Generator]", "kind" : "val"}, {"label" : "toRainierCategorical", "tail" : ": FunctionK[Categorical, stripe.rainier.core.Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.toRainierCategorical", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#toRainierCategorical:cats.arrow.FunctionK[com.scalarl.rainier.Categorical,com.stripe.rainier.core.Categorical]", "kind" : "val"}, {"label" : "setToCategorical", "tail" : ": FunctionK[Set, Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.setToCategorical", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#setToCategorical:cats.arrow.FunctionK[Set,com.scalarl.rainier.Categorical]", "kind" : "val"}, {"label" : "gen", "tail" : "(): ToGenerator[Categorical[T], T]", "member" : "com.scalarl.rainier.CategoricalInstances.gen", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#gen[T]:com.stripe.rainier.core.ToGenerator[com.scalarl.rainier.Categorical[T],T]", "kind" : "implicit def"}, {"label" : "catMonoid", "tail" : "(arg0: Monoid[A]): Monoid[Categorical[A]]", "member" : "com.scalarl.rainier.CategoricalInstances.catMonoid", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#catMonoid[A](implicitevidence$2:cats.Monoid[A]):cats.Monoid[com.scalarl.rainier.Categorical[A]]", "kind" : "implicit def"}, {"label" : "catMonad", "tail" : ": Monad[Categorical]", "member" : "com.scalarl.rainier.CategoricalInstances.catMonad", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#catMonad:cats.Monad[com.scalarl.rainier.Categorical]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/rainier\/CategoricalInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/scalarl\/rainier\/CategoricalInstances.html", "kind" : "trait"}], "com.scalarl.plot" : [{"name" : "com.scalarl.plot.Plot", "shortDescription" : "", "object" : "com\/scalarl\/plot\/Plot$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.plot.Plot.main", "link" : "com\/scalarl\/plot\/Plot$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "heatMap", "tail" : "(data: Seq[Seq[Double]], colorCount: Int): Unit", "member" : "com.scalarl.plot.Plot.heatMap", "link" : "com\/scalarl\/plot\/Plot$.html#heatMap(data:Seq[Seq[Double]],colorCount:Int):Unit", "kind" : "def"}, {"label" : "gridPlot", "tail" : "(): Unit", "member" : "com.scalarl.plot.Plot.gridPlot", "link" : "com\/scalarl\/plot\/Plot$.html#gridPlot():Unit", "kind" : "def"}, {"label" : "polyPlot", "tail" : "(): Unit", "member" : "com.scalarl.plot.Plot.polyPlot", "link" : "com\/scalarl\/plot\/Plot$.html#polyPlot():Unit", "kind" : "def"}, {"label" : "lineChart", "tail" : "(data: Seq[(Seq[Point], String)]): Unit", "member" : "com.scalarl.plot.Plot.lineChart", "link" : "com\/scalarl\/plot\/Plot$.html#lineChart(data:Seq[(Seq[com.cibo.evilplot.numeric.Point],String)]):Unit", "kind" : "def"}, {"label" : "lineChartSeq", "tail" : "(pointSeq: (Seq[Double], String)*): Unit", "member" : "com.scalarl.plot.Plot.lineChartSeq", "link" : "com\/scalarl\/plot\/Plot$.html#lineChartSeq(pointSeq:(Seq[Double],String)*):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/plot\/Plot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/plot\/Plot$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/plot\/Plot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/plot\/Plot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/plot\/Plot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/plot\/Plot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/plot\/Plot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Plot$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Plot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Plot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/plot\/Plot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/plot\/Plot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/plot\/Plot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/plot\/Plot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/plot\/Plot$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/plot\/Plot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/plot\/Plot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/plot\/Plot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/plot\/Plot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.plot.Tabulator", "shortDescription" : "Shamelessly copied from:http:\/\/stackoverflow.com\/a\/7542476", "object" : "com\/scalarl\/plot\/Tabulator$.html", "members_object" : [{"label" : "rowSeparator", "tail" : "(colSizes: Iterable[Int]): String", "member" : "com.scalarl.plot.Tabulator.rowSeparator", "link" : "com\/scalarl\/plot\/Tabulator$.html#rowSeparator(colSizes:Iterable[Int]):String", "kind" : "def"}, {"label" : "formatRow", "tail" : "(row: Iterable[Any], colSizes: Iterable[Int]): String", "member" : "com.scalarl.plot.Tabulator.formatRow", "link" : "com\/scalarl\/plot\/Tabulator$.html#formatRow(row:Iterable[Any],colSizes:Iterable[Int]):String", "kind" : "def"}, {"label" : "formatRows", "tail" : "(rowSeparator: String, rows: Iterable[String]): String", "member" : "com.scalarl.plot.Tabulator.formatRows", "link" : "com\/scalarl\/plot\/Tabulator$.html#formatRows(rowSeparator:String,rows:Iterable[String]):String", "kind" : "def"}, {"label" : "format", "tail" : "(table: Iterable[Iterable[Any]]): String", "member" : "com.scalarl.plot.Tabulator.format", "link" : "com\/scalarl\/plot\/Tabulator$.html#format(table:Iterable[Iterable[Any]]):String", "kind" : "def"}, {"label" : "csv", "tail" : "(table: Iterable[Iterable[Any]]): String", "member" : "com.scalarl.plot.Tabulator.csv", "link" : "com\/scalarl\/plot\/Tabulator$.html#csv(table:Iterable[Iterable[Any]]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/plot\/Tabulator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/plot\/Tabulator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/plot\/Tabulator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/plot\/Tabulator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/plot\/Tabulator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/plot\/Tabulator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/plot\/Tabulator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Tabulator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Tabulator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/plot\/Tabulator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/plot\/Tabulator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/plot\/Tabulator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/plot\/Tabulator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/plot\/Tabulator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/plot\/Tabulator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/plot\/Tabulator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/plot\/Tabulator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/plot\/Tabulator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/plot\/Tabulator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.scalarl.evaluate" : [{"name" : "com.scalarl.evaluate.ActionValue", "members_trait" : [{"label" : "byPolicy", "tail" : "(policy: Policy[Obs, A, R, M, S])(M: Expectation[M], MV: Module[Double, G]): StateValue[Obs, A, R, G, S]", "member" : "com.scalarl.evaluate.ActionValue.byPolicy", "link" : "com\/scalarl\/evaluate\/ActionValue.html#byPolicy[M[_]](policy:com.scalarl.Policy[Obs,A,R,M,S])(implicitM:com.scalarl.algebra.Expectation[M],implicitMV:com.scalarl.algebra.Module[Double,G]):com.scalarl.evaluate.StateValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "greedyOptions", "tail" : "(state: State[Obs, A, R, S])(G: Ordering[G]): Set[A]", "member" : "com.scalarl.evaluate.ActionValue.greedyOptions", "link" : "com\/scalarl\/evaluate\/ActionValue.html#greedyOptions(state:com.scalarl.State[Obs,A,R,S])(implicitG:Ordering[G]):Set[A]", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/scalarl\/evaluate\/ActionValue.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/scalarl\/evaluate\/ActionValue.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/evaluate\/ActionValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/evaluate\/ActionValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/evaluate\/ActionValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/evaluate\/ActionValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/evaluate\/ActionValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/evaluate\/ActionValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/evaluate\/ActionValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/evaluate\/ActionValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/evaluate\/ActionValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/evaluate\/ActionValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/evaluate\/ActionValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/evaluate\/ActionValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/evaluate\/ActionValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/evaluate\/ActionValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/evaluate\/ActionValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/evaluate\/ActionValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "evaluate", "tail" : "(state: State[Obs, A, R, S], a: A): G", "member" : "com.scalarl.evaluate.ActionValue.evaluate", "link" : "com\/scalarl\/evaluate\/ActionValue.html#evaluate(state:com.scalarl.State[Obs,A,R,S],a:A):G", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/scalarl\/evaluate\/ActionValue.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/scalarl\/evaluate\/ActionValue.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/scalarl\/evaluate\/ActionValue.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "    trait for evaluation of a given state, action pair.", "object" : "com\/scalarl\/evaluate\/ActionValue$.html", "members_object" : [{"label" : "ByStateValue", "tail" : "", "member" : "com.scalarl.evaluate.ActionValue.ByStateValue", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#ByStateValue[Obs,A,R,G,S[_]]extendsActionValue[Obs,A,R,G,S]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Fn", "tail" : "", "member" : "com.scalarl.evaluate.ActionValue.Fn", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#Fn[Obs,A,R,G,S[_]]extendsActionValue[Obs,A,R,G,S]withProductwithSerializable", "kind" : "final case class"}, {"label" : "fn", "tail" : "(f: ActionValueFn[Obs, A, G]): ActionValue[Obs, A, R, G, S]", "member" : "com.scalarl.evaluate.ActionValue.fn", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#fn[Obs,A,R,G,S[_]](f:com.scalarl.ActionValueFn[Obs,A,G]):com.scalarl.evaluate.ActionValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/evaluate\/ActionValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/evaluate\/ActionValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/evaluate\/ActionValue.html", "kind" : "trait"}, {"name" : "com.scalarl.evaluate.StateValue", "members_trait" : [{"label" : "byStateValue", "tail" : "(prepare: (R) ⇒ G, merge: (G, G) ⇒ G)(S: Expectation[S], MV: Module[Double, G]): ActionValue[Obs, A, R, G, S]", "member" : "com.scalarl.evaluate.StateValue.byStateValue", "link" : "com\/scalarl\/evaluate\/StateValue.html#byStateValue(prepare:R=>G,merge:(G,G)=>G)(implicitS:com.scalarl.algebra.Expectation[S],implicitMV:com.scalarl.algebra.Module[Double,G]):com.scalarl.evaluate.ActionValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/scalarl\/evaluate\/StateValue.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/scalarl\/evaluate\/StateValue.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/evaluate\/StateValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/evaluate\/StateValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/evaluate\/StateValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/evaluate\/StateValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/evaluate\/StateValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/evaluate\/StateValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/evaluate\/StateValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/evaluate\/StateValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/evaluate\/StateValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/evaluate\/StateValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/evaluate\/StateValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/evaluate\/StateValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/evaluate\/StateValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/evaluate\/StateValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/evaluate\/StateValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/evaluate\/StateValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "evaluate", "tail" : "(state: State[Obs, A, R, S]): G", "member" : "com.scalarl.evaluate.StateValue.evaluate", "link" : "com\/scalarl\/evaluate\/StateValue.html#evaluate(state:com.scalarl.State[Obs,A,R,S]):G", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/scalarl\/evaluate\/StateValue.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/scalarl\/evaluate\/StateValue.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/scalarl\/evaluate\/StateValue.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "    trait for evaluating a given state.", "object" : "com\/scalarl\/evaluate\/StateValue$.html", "members_object" : [{"label" : "ByPolicy", "tail" : "", "member" : "com.scalarl.evaluate.StateValue.ByPolicy", "link" : "com\/scalarl\/evaluate\/StateValue$.html#ByPolicy[Obs,A,R,G,M[_],S[_]]extendsStateValue[Obs,A,R,G,S]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Fn", "tail" : "", "member" : "com.scalarl.evaluate.StateValue.Fn", "link" : "com\/scalarl\/evaluate\/StateValue$.html#Fn[Obs,A,R,G,S[_]]extendsStateValue[Obs,A,R,G,S]withProductwithSerializable", "kind" : "final case class"}, {"label" : "fn", "tail" : "(f: StateValueFn[Obs, G]): StateValue[Obs, A, R, G, S]", "member" : "com.scalarl.evaluate.StateValue.fn", "link" : "com\/scalarl\/evaluate\/StateValue$.html#fn[Obs,A,R,G,S[_]](f:com.scalarl.StateValueFn[Obs,G]):com.scalarl.evaluate.StateValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/evaluate\/StateValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/evaluate\/StateValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/evaluate\/StateValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/evaluate\/StateValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/evaluate\/StateValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/evaluate\/StateValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/evaluate\/StateValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/evaluate\/StateValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/evaluate\/StateValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/evaluate\/StateValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/evaluate\/StateValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/evaluate\/StateValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/evaluate\/StateValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/evaluate\/StateValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/evaluate\/StateValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/evaluate\/StateValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/evaluate\/StateValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/evaluate\/StateValue.html", "kind" : "trait"}], "com.scalarl.value" : [{"name" : "com.scalarl.value.ConstantStep", "shortDescription" : "Exponential recency-weighted average.", "object" : "com\/scalarl\/value\/ConstantStep$.html", "members_object" : [{"label" : "module", "tail" : "(G: Group[ConstantStep]): Module[Double, ConstantStep]", "member" : "com.scalarl.value.ConstantStep.module", "link" : "com\/scalarl\/value\/ConstantStep$.html#module(implicitG:com.twitter.algebird.Group[com.scalarl.value.ConstantStep]):com.scalarl.algebra.Module[Double,com.scalarl.value.ConstantStep]", "kind" : "implicit def"}, {"label" : "group", "tail" : "(alpha: Alpha, eps: Epsilon): Group[ConstantStep]", "member" : "com.scalarl.value.ConstantStep.group", "link" : "com\/scalarl\/value\/ConstantStep$.html#group(alpha:com.scalarl.value.ConstantStep.Alpha,eps:com.scalarl.value.ConstantStep.Epsilon):com.twitter.algebird.Group[com.scalarl.value.ConstantStep]", "kind" : "def"}, {"label" : "buildReward", "tail" : "(reward: T, alpha: Alpha, time: Time)(num: Numeric[T]): ConstantStep", "member" : "com.scalarl.value.ConstantStep.buildReward", "link" : "com\/scalarl\/value\/ConstantStep$.html#buildReward[T](reward:T,alpha:com.scalarl.value.ConstantStep.Alpha,time:com.scalarl.Time)(implicitnum:Numeric[T]):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "buildAggregate", "tail" : "(value: T, time: Time)(num: Numeric[T]): ConstantStep", "member" : "com.scalarl.value.ConstantStep.buildAggregate", "link" : "com\/scalarl\/value\/ConstantStep$.html#buildAggregate[T](value:T,time:com.scalarl.Time)(implicitnum:Numeric[T]):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "buildAggregate", "tail" : "(value: T)(num: Numeric[T]): ConstantStep", "member" : "com.scalarl.value.ConstantStep.buildAggregate", "link" : "com\/scalarl\/value\/ConstantStep$.html#buildAggregate[T](value:T)(implicitnum:Numeric[T]):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "zero", "tail" : ": ConstantStep", "member" : "com.scalarl.value.ConstantStep.zero", "link" : "com\/scalarl\/value\/ConstantStep$.html#zero:com.scalarl.value.ConstantStep", "kind" : "val"}, {"label" : "Epsilon", "tail" : "", "member" : "com.scalarl.value.ConstantStep.Epsilon", "link" : "com\/scalarl\/value\/ConstantStep$.html#EpsilonextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Alpha", "tail" : "", "member" : "com.scalarl.value.ConstantStep.Alpha", "link" : "com\/scalarl\/value\/ConstantStep$.html#AlphaextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/ConstantStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/ConstantStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/ConstantStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/ConstantStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/ConstantStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/ConstantStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/ConstantStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/ConstantStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/ConstantStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/ConstantStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/ConstantStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/ConstantStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/ConstantStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/ConstantStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/ConstantStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/ConstantStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "decayTo", "tail" : "(t2: Time, alpha: Alpha, eps: Epsilon): ConstantStep", "member" : "com.scalarl.value.ConstantStep.decayTo", "link" : "com\/scalarl\/value\/ConstantStep.html#decayTo(t2:com.scalarl.Time,alpha:com.scalarl.value.ConstantStep.Alpha,eps:com.scalarl.value.ConstantStep.Epsilon):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "compare", "tail" : "(that: ConstantStep): Int", "member" : "com.scalarl.value.ConstantStep.compare", "link" : "com\/scalarl\/value\/ConstantStep.html#compare(that:com.scalarl.value.ConstantStep):Int", "kind" : "def"}, {"member" : "com.scalarl.value.ConstantStep#<init>", "error" : "unsupported entity"}, {"label" : "time", "tail" : ": Time", "member" : "com.scalarl.value.ConstantStep.time", "link" : "com\/scalarl\/value\/ConstantStep.html#time:com.scalarl.Time", "kind" : "val"}, {"label" : "value", "tail" : ": Double", "member" : "com.scalarl.value.ConstantStep.value", "link" : "com\/scalarl\/value\/ConstantStep.html#value:Double", "kind" : "val"}, {"label" : "compareTo", "tail" : "(that: ConstantStep): Int", "member" : "scala.math.Ordered.compareTo", "link" : "com\/scalarl\/value\/ConstantStep.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: ConstantStep): Boolean", "member" : "scala.math.Ordered.>=", "link" : "com\/scalarl\/value\/ConstantStep.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: ConstantStep): Boolean", "member" : "scala.math.Ordered.<=", "link" : "com\/scalarl\/value\/ConstantStep.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: ConstantStep): Boolean", "member" : "scala.math.Ordered.>", "link" : "com\/scalarl\/value\/ConstantStep.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: ConstantStep): Boolean", "member" : "scala.math.Ordered.<", "link" : "com\/scalarl\/value\/ConstantStep.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/ConstantStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/ConstantStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/ConstantStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/ConstantStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/ConstantStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/ConstantStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/ConstantStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/ConstantStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/ConstantStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/ConstantStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/ConstantStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/ConstantStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/ConstantStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/value\/ConstantStep.html", "kind" : "case class"}, {"name" : "com.scalarl.value.ConstantStepGroup", "shortDescription" : "", "members_class" : [{"label" : "reward", "tail" : "(v: ConstantStep, reward: Double, time: Time): ConstantStep", "member" : "com.scalarl.value.ConstantStepGroup.reward", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#reward(v:com.scalarl.value.ConstantStep,reward:Double,time:com.scalarl.Time):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "valueAsOf", "tail" : "(v: ConstantStep, time: Time): Double", "member" : "com.scalarl.value.ConstantStepGroup.valueAsOf", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#valueAsOf(v:com.scalarl.value.ConstantStep,time:com.scalarl.Time):Double", "kind" : "def"}, {"label" : "plus", "tail" : "(l: ConstantStep, r: ConstantStep): ConstantStep", "member" : "com.scalarl.value.ConstantStepGroup.plus", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#plus(l:com.scalarl.value.ConstantStep,r:com.scalarl.value.ConstantStep):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "negate", "tail" : "(v: ConstantStep): ConstantStep", "member" : "com.scalarl.value.ConstantStepGroup.negate", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#negate(v:com.scalarl.value.ConstantStep):com.scalarl.value.ConstantStep", "kind" : "def"}, {"label" : "isNonZero", "tail" : "(cs: ConstantStep): Boolean", "member" : "com.scalarl.value.ConstantStepGroup.isNonZero", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#isNonZero(cs:com.scalarl.value.ConstantStep):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : ": ConstantStep", "member" : "com.scalarl.value.ConstantStepGroup.zero", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#zero:com.scalarl.value.ConstantStep", "kind" : "val"}, {"member" : "com.scalarl.value.ConstantStepGroup#<init>", "error" : "unsupported entity"}, {"label" : "inverse", "tail" : "(v: ConstantStep): ConstantStep", "member" : "com.twitter.algebird.Group.inverse", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#inverse(v:T):T", "kind" : "def"}, {"label" : "remove", "tail" : "(l: ConstantStep, r: ConstantStep): ConstantStep", "member" : "com.twitter.algebird.Group.remove", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#remove(l:T,r:T):T", "kind" : "def"}, {"label" : "additive", "tail" : "(): Group[ConstantStep]", "member" : "com.twitter.algebird.Group.additive", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#additive:algebra.Group[T]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: ConstantStep, n: Int): ConstantStep", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: ConstantStep, y: ConstantStep): ConstantStep", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "combineAll", "tail" : "(t: TraversableOnce[ConstantStep]): ConstantStep", "member" : "com.twitter.algebird.Monoid.combineAll", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#combineAll(t:TraversableOnce[T]):T", "kind" : "def"}, {"label" : "empty", "tail" : "(): ConstantStep", "member" : "com.twitter.algebird.Monoid.empty", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#empty:T", "kind" : "def"}, {"label" : "sum", "tail" : "(vs: TraversableOnce[ConstantStep]): ConstantStep", "member" : "com.twitter.algebird.Monoid.sum", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#sum(vs:TraversableOnce[T]):T", "kind" : "def"}, {"label" : "nonZeroOption", "tail" : "(v: ConstantStep): Option[ConstantStep]", "member" : "com.twitter.algebird.Monoid.nonZeroOption", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#nonZeroOption(v:T):Option[T]", "kind" : "def"}, {"label" : "assertNotZero", "tail" : "(v: ConstantStep): Unit", "member" : "com.twitter.algebird.Monoid.assertNotZero", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#assertNotZero(v:T):Unit", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[ConstantStep]): Option[ConstantStep]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: ConstantStep)(ev: Eq[ConstantStep]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(iter: TraversableOnce[ConstantStep]): Option[ConstantStep]", "member" : "com.twitter.algebird.Semigroup.combineAllOption", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#combineAllOption(iter:TraversableOnce[T]):Option[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(l: ConstantStep, r: ConstantStep): ConstantStep", "member" : "com.twitter.algebird.Semigroup.combine", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#combine(l:T,r:T):T", "kind" : "def"}, {"label" : "sumOption", "tail" : "(iter: TraversableOnce[ConstantStep]): Option[ConstantStep]", "member" : "com.twitter.algebird.Semigroup.sumOption", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#sumOption(iter:TraversableOnce[T]):Option[T]", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: ConstantStep, n: Int): ConstantStep", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: ConstantStep, n: Int): ConstantStep", "member" : "cats.kernel.Group.combineN", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: ConstantStep)(ev: Eq[ConstantStep]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: ConstantStep, n: Int): ConstantStep", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/ConstantStepGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/ConstantStepGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/scalarl\/value\/ConstantStepGroup.html", "kind" : "class"}, {"name" : "com.scalarl.value.DecayState", "members_trait" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/scalarl\/value\/DecayState.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/scalarl\/value\/DecayState.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/DecayState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/DecayState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/DecayState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/DecayState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/DecayState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/DecayState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/DecayState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/DecayState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/DecayState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/DecayState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/DecayState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/DecayState.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/DecayState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/DecayState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/DecayState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/DecayState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(): A", "member" : "com.scalarl.value.DecayState.get", "link" : "com\/scalarl\/value\/DecayState.html#get:A", "kind" : "abstract def"}, {"label" : "toValue", "tail" : "(): DecayedValue[A]", "member" : "com.scalarl.value.DecayState.toValue", "link" : "com\/scalarl\/value\/DecayState.html#toValue:com.scalarl.value.DecayState.DecayedValue[A]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/scalarl\/value\/DecayState.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/scalarl\/value\/DecayState.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/scalarl\/value\/DecayState.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "  This represents a value that's weighted as you move away from it.", "object" : "com\/scalarl\/value\/DecayState$.html", "members_object" : [{"label" : "dsOrd", "tail" : "(arg0: Ordering[A]): Ordering[DecayState[A]]", "member" : "com.scalarl.value.DecayState.dsOrd", "link" : "com\/scalarl\/value\/DecayState$.html#dsOrd[A](implicitevidence$5:Ordering[A]):Ordering[com.scalarl.value.DecayState[A]]", "kind" : "implicit def"}, {"label" : "toDouble", "tail" : "(A: ToDouble[A]): ToDouble[DecayState[A]]", "member" : "com.scalarl.value.DecayState.toDouble", "link" : "com\/scalarl\/value\/DecayState$.html#toDouble[A](implicitA:com.scalarl.algebra.ToDouble[A]):com.scalarl.algebra.ToDouble[com.scalarl.value.DecayState[A]]", "kind" : "implicit def"}, {"label" : "decayStateGroup", "tail" : "(gamma: Double)(M: Module[Double, A]): Group[DecayState[A]]", "member" : "com.scalarl.value.DecayState.decayStateGroup", "link" : "com\/scalarl\/value\/DecayState$.html#decayStateGroup[A](gamma:Double)(implicitM:com.scalarl.algebra.Module[Double,A]):com.twitter.algebird.Group[com.scalarl.value.DecayState[A]]", "kind" : "def"}, {"label" : "decayStateVectorSpace", "tail" : "(gamma: Double)(arg0: Ring[A], M: Module[Double, A]): VectorSpace[A, DecayState]", "member" : "com.scalarl.value.DecayState.decayStateVectorSpace", "link" : "com\/scalarl\/value\/DecayState$.html#decayStateVectorSpace[A](gamma:Double)(implicitevidence$4:com.twitter.algebird.Ring[A],implicitM:com.scalarl.algebra.Module[Double,A]):com.twitter.algebird.VectorSpace[A,com.scalarl.value.DecayState]", "kind" : "def"}, {"label" : "decayStateModule", "tail" : "(gamma: Double)(M: Module[Double, A]): Module[Double, DecayState[A]]", "member" : "com.scalarl.value.DecayState.decayStateModule", "link" : "com\/scalarl\/value\/DecayState$.html#decayStateModule[A](gamma:Double)(implicitM:com.scalarl.algebra.Module[Double,A]):com.scalarl.algebra.Module[Double,com.scalarl.value.DecayState[A]]", "kind" : "def"}, {"label" : "bellmanFn", "tail" : "(gamma: Double)(arg0: DModule[R], arg1: Expectation[M], arg2: Expectation[S]): (StateValueFn[Obs, DecayState[R]], Policy[Obs, A, R, M, S]) ⇒ StateValue[Obs, A, R, DecayState[R], S]", "member" : "com.scalarl.value.DecayState.bellmanFn", "link" : "com\/scalarl\/value\/DecayState$.html#bellmanFn[Obs,A,R,T,M[_],S[_]](gamma:Double)(implicitevidence$1:com.scalarl.algebra.Module.DModule[R],implicitevidence$2:com.scalarl.algebra.Expectation[M],implicitevidence$3:com.scalarl.algebra.Expectation[S]):(com.scalarl.StateValueFn[Obs,com.scalarl.value.DecayState[R]],com.scalarl.Policy[Obs,A,R,M,S])=>com.scalarl.evaluate.StateValue[Obs,A,R,com.scalarl.value.DecayState[R],S]", "kind" : "def"}, {"label" : "DecayedValue", "tail" : "", "member" : "com.scalarl.value.DecayState.DecayedValue", "link" : "com\/scalarl\/value\/DecayState$.html#DecayedValue[A]extendsDecayState[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Reward", "tail" : "", "member" : "com.scalarl.value.DecayState.Reward", "link" : "com\/scalarl\/value\/DecayState$.html#Reward[A]extendsDecayState[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/DecayState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/DecayState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/DecayState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/DecayState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/DecayState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/DecayState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/DecayState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/DecayState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/DecayState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/DecayState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/DecayState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/DecayState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/DecayState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/DecayState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/DecayState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/DecayState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/DecayState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/value\/DecayState.html", "kind" : "trait"}, {"name" : "com.scalarl.value.WeightedAverage", "shortDescription" : "  This is of course extremely similar to the averaged value implementation in  Algebird...", "object" : "com\/scalarl\/value\/WeightedAverage$.html", "members_object" : [{"label" : "group", "tail" : ": Group[WeightedAverage]", "member" : "com.scalarl.value.WeightedAverage.group", "link" : "com\/scalarl\/value\/WeightedAverage$.html#group:com.twitter.algebird.Group[com.scalarl.value.WeightedAverage]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/WeightedAverage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/WeightedAverage$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/WeightedAverage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/WeightedAverage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/WeightedAverage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/WeightedAverage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/WeightedAverage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/WeightedAverage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/WeightedAverage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/WeightedAverage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/WeightedAverage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/WeightedAverage$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/WeightedAverage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/WeightedAverage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "plus", "tail" : "(that: Double, weight: Weight): WeightedAverage", "member" : "com.scalarl.value.WeightedAverage.plus", "link" : "com\/scalarl\/value\/WeightedAverage.html#plus(that:Double,weight:com.scalarl.algebra.Weight):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "+", "tail" : "(that: Double): WeightedAverage", "member" : "com.scalarl.value.WeightedAverage.+", "link" : "com\/scalarl\/value\/WeightedAverage.html#+(that:Double):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "+", "tail" : "(r: WeightedAverage): WeightedAverage", "member" : "com.scalarl.value.WeightedAverage.+", "link" : "com\/scalarl\/value\/WeightedAverage.html#+(r:com.scalarl.value.WeightedAverage):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "-", "tail" : "(r: WeightedAverage): WeightedAverage", "member" : "com.scalarl.value.WeightedAverage.-", "link" : "com\/scalarl\/value\/WeightedAverage.html#-(r:com.scalarl.value.WeightedAverage):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): WeightedAverage", "member" : "com.scalarl.value.WeightedAverage.unary_-", "link" : "com\/scalarl\/value\/WeightedAverage.html#unary_-:com.scalarl.value.WeightedAverage", "kind" : "def"}, {"member" : "com.scalarl.value.WeightedAverage#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Double", "member" : "com.scalarl.value.WeightedAverage.value", "link" : "com\/scalarl\/value\/WeightedAverage.html#value:Double", "kind" : "val"}, {"label" : "weightSum", "tail" : ": Weight", "member" : "com.scalarl.value.WeightedAverage.weightSum", "link" : "com\/scalarl\/value\/WeightedAverage.html#weightSum:com.scalarl.algebra.Weight", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/WeightedAverage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/WeightedAverage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/WeightedAverage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/WeightedAverage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/WeightedAverage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/WeightedAverage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/WeightedAverage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/WeightedAverage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/WeightedAverage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/WeightedAverage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/WeightedAverage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/value\/WeightedAverage.html", "kind" : "case class"}, {"name" : "com.scalarl.value.WeightedAverageGroup", "shortDescription" : "Group implementation for WeightedAverage.", "object" : "com\/scalarl\/value\/WeightedAverageGroup$.html", "members_object" : [{"label" : "plus", "tail" : "(l: WeightedAverage, r: WeightedAverage): WeightedAverage", "member" : "com.scalarl.value.WeightedAverageGroup.plus", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#plus(l:com.scalarl.value.WeightedAverage,r:com.scalarl.value.WeightedAverage):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "sumOption", "tail" : "(iter: TraversableOnce[WeightedAverage]): Option[WeightedAverage]", "member" : "com.scalarl.value.WeightedAverageGroup.sumOption", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#sumOption(iter:TraversableOnce[com.scalarl.value.WeightedAverage]):Option[com.scalarl.value.WeightedAverage]", "kind" : "def"}, {"label" : "negate", "tail" : "(av: WeightedAverage): WeightedAverage", "member" : "com.scalarl.value.WeightedAverageGroup.negate", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#negate(av:com.scalarl.value.WeightedAverage):com.scalarl.value.WeightedAverage", "kind" : "def"}, {"label" : "isNonZero", "tail" : "(av: WeightedAverage): Boolean", "member" : "com.scalarl.value.WeightedAverageGroup.isNonZero", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#isNonZero(av:com.scalarl.value.WeightedAverage):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : ": WeightedAverage", "member" : "com.scalarl.value.WeightedAverageGroup.zero", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#zero:com.scalarl.value.WeightedAverage", "kind" : "val"}, {"label" : "inverse", "tail" : "(v: WeightedAverage): WeightedAverage", "member" : "com.twitter.algebird.Group.inverse", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#inverse(v:T):T", "kind" : "def"}, {"label" : "remove", "tail" : "(l: WeightedAverage, r: WeightedAverage): WeightedAverage", "member" : "com.twitter.algebird.Group.remove", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#remove(l:T,r:T):T", "kind" : "def"}, {"label" : "additive", "tail" : "(): Group[WeightedAverage]", "member" : "com.twitter.algebird.Group.additive", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#additive:algebra.Group[T]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: WeightedAverage, n: Int): WeightedAverage", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: WeightedAverage, y: WeightedAverage): WeightedAverage", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "combineAll", "tail" : "(t: TraversableOnce[WeightedAverage]): WeightedAverage", "member" : "com.twitter.algebird.Monoid.combineAll", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#combineAll(t:TraversableOnce[T]):T", "kind" : "def"}, {"label" : "empty", "tail" : "(): WeightedAverage", "member" : "com.twitter.algebird.Monoid.empty", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#empty:T", "kind" : "def"}, {"label" : "sum", "tail" : "(vs: TraversableOnce[WeightedAverage]): WeightedAverage", "member" : "com.twitter.algebird.Monoid.sum", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#sum(vs:TraversableOnce[T]):T", "kind" : "def"}, {"label" : "nonZeroOption", "tail" : "(v: WeightedAverage): Option[WeightedAverage]", "member" : "com.twitter.algebird.Monoid.nonZeroOption", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#nonZeroOption(v:T):Option[T]", "kind" : "def"}, {"label" : "assertNotZero", "tail" : "(v: WeightedAverage): Unit", "member" : "com.twitter.algebird.Monoid.assertNotZero", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#assertNotZero(v:T):Unit", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[WeightedAverage]): Option[WeightedAverage]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: WeightedAverage)(ev: Eq[WeightedAverage]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(iter: TraversableOnce[WeightedAverage]): Option[WeightedAverage]", "member" : "com.twitter.algebird.Semigroup.combineAllOption", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#combineAllOption(iter:TraversableOnce[T]):Option[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(l: WeightedAverage, r: WeightedAverage): WeightedAverage", "member" : "com.twitter.algebird.Semigroup.combine", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#combine(l:T,r:T):T", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: WeightedAverage, n: Int): WeightedAverage", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: WeightedAverage, n: Int): WeightedAverage", "member" : "cats.kernel.Group.combineN", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: WeightedAverage)(ev: Eq[WeightedAverage]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: WeightedAverage, n: Int): WeightedAverage", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/value\/WeightedAverageGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.scalarl.policy.bandit" : [{"name" : "com.scalarl.policy.bandit.Gradient", "shortDescription" : "This thing needs to track its average reward internally...", "object" : "com\/scalarl\/policy\/bandit\/Gradient$.html", "members_object" : [{"label" : "fromAggregator", "tail" : "(stepSize: Double, initial: T, agg: Aggregator[R, T, Double])(arg0: ToDouble[R]): Config[R, T]", "member" : "com.scalarl.policy.bandit.Gradient.fromAggregator", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#fromAggregator[R,T](stepSize:Double,initial:T,agg:com.twitter.algebird.Aggregator[R,T,Double])(implicitevidence$9:com.scalarl.algebra.ToDouble[R]):com.scalarl.policy.bandit.Gradient.Config[R,T]", "kind" : "def"}, {"label" : "noBaseline", "tail" : "(stepSize: Double): Config[Double, Unit]", "member" : "com.scalarl.policy.bandit.Gradient.noBaseline", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#noBaseline(stepSize:Double):com.scalarl.policy.bandit.Gradient.Config[Double,Unit]", "kind" : "def"}, {"label" : "incrementalConfig", "tail" : "(stepSize: Double, initial: Double): Config[Double, AveragedValue]", "member" : "com.scalarl.policy.bandit.Gradient.incrementalConfig", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#incrementalConfig(stepSize:Double,initial:Double):com.scalarl.policy.bandit.Gradient.Config[Double,com.twitter.algebird.AveragedValue]", "kind" : "def"}, {"label" : "Config", "tail" : "", "member" : "com.scalarl.policy.bandit.Gradient.Config", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#Config[R,T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Item", "tail" : "", "member" : "com.scalarl.policy.bandit.Gradient.Item", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#Item[T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Item", "tail" : "", "member" : "com.scalarl.policy.bandit.Gradient.Item", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#Item", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Gradient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "learn", "tail" : "(sars: SARS[Obs, A, R, S]): This", "member" : "com.scalarl.policy.bandit.Gradient.learn", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#learn(sars:com.scalarl.SARS[Obs,A,R,S]):Gradient.this.This", "kind" : "def"}, {"label" : "choose", "tail" : "(state: State[Obs, A, R, S]): Cat[A]", "member" : "com.scalarl.policy.bandit.Gradient.choose", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#choose(state:com.scalarl.State[Obs,A,R,S]):com.scalarl.Cat[A]", "kind" : "def"}, {"label" : "aToDouble", "tail" : "(obs: Obs): ToDouble[A]", "member" : "com.scalarl.policy.bandit.Gradient.aToDouble", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#aToDouble(obs:Obs):com.scalarl.algebra.ToDouble[A]", "kind" : "def"}, {"member" : "com.scalarl.policy.bandit.Gradient#<init>", "error" : "unsupported entity"}, {"label" : "valueFn", "tail" : ": ActionValueFn[Obs, A, Item[T]]", "member" : "com.scalarl.policy.bandit.Gradient.valueFn", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#valueFn:com.scalarl.ActionValueFn[Obs,A,com.scalarl.policy.bandit.Gradient.Item[T]]", "kind" : "val"}, {"label" : "config", "tail" : ": Config[R, T]", "member" : "com.scalarl.policy.bandit.Gradient.config", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#config:com.scalarl.policy.bandit.Gradient.Config[R,T]", "kind" : "val"}, {"label" : "mapK", "tail" : "(f: FunctionK[Cat, N]): Policy[Obs, A, R, N, S]", "member" : "com.scalarl.Policy.mapK", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N]):com.scalarl.Policy[Obs,A,R,N,S]", "kind" : "def"}, {"label" : "contramapReward", "tail" : "(f: (T) ⇒ R)(S: Functor[S]): Policy[Obs, A, T, Cat, S]", "member" : "com.scalarl.Policy.contramapReward", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#contramapReward[T](f:T=>R)(implicitS:cats.Functor[S]):com.scalarl.Policy[Obs,A,T,M,S]", "kind" : "def"}, {"label" : "contramapObservation", "tail" : "(f: (P) ⇒ Obs)(S: Functor[S]): Policy[P, A, R, Cat, S]", "member" : "com.scalarl.Policy.contramapObservation", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#contramapObservation[P](f:P=>Obs)(implicitS:cats.Functor[S]):com.scalarl.Policy[P,A,R,M,S]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Policy.This", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#This=com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Gradient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/policy\/bandit\/Gradient.html", "kind" : "case class"}, {"name" : "com.scalarl.policy.bandit.Greedy", "shortDescription" : "", "object" : "com\/scalarl\/policy\/bandit\/Greedy$.html", "members_object" : [{"label" : "incrementalConfig", "tail" : "(epsilon: Double, initial: Double): Config[Double, AveragedValue]", "member" : "com.scalarl.policy.bandit.Greedy.incrementalConfig", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#incrementalConfig(epsilon:Double,initial:Double):com.scalarl.policy.bandit.Greedy.Config[Double,com.twitter.algebird.AveragedValue]", "kind" : "def"}, {"label" : "Config", "tail" : "", "member" : "com.scalarl.policy.bandit.Greedy.Config", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#Config[R,T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Greedy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "learn", "tail" : "(sars: SARS[Obs, A, R, S]): This", "member" : "com.scalarl.policy.bandit.Greedy.learn", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#learn(sars:com.scalarl.SARS[Obs,A,R,S]):Greedy.this.This", "kind" : "def"}, {"label" : "choose", "tail" : "(state: State[Obs, A, R, S]): Cat[A]", "member" : "com.scalarl.policy.bandit.Greedy.choose", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#choose(state:com.scalarl.State[Obs,A,R,S]):com.scalarl.Cat[A]", "kind" : "def"}, {"label" : "functor", "tail" : ": Functor[Cat]", "member" : "com.scalarl.policy.bandit.Greedy.functor", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#functor:cats.Functor[com.scalarl.Cat]", "kind" : "implicit val"}, {"member" : "com.scalarl.policy.bandit.Greedy#<init>", "error" : "unsupported entity"}, {"label" : "valueFn", "tail" : ": ActionValueFn[Obs, A, T]", "member" : "com.scalarl.policy.bandit.Greedy.valueFn", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#valueFn:com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "val"}, {"label" : "config", "tail" : ": Config[R, T]", "member" : "com.scalarl.policy.bandit.Greedy.config", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#config:com.scalarl.policy.bandit.Greedy.Config[R,T]", "kind" : "val"}, {"label" : "mapK", "tail" : "(f: FunctionK[Cat, N]): Policy[Obs, A, R, N, S]", "member" : "com.scalarl.Policy.mapK", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N]):com.scalarl.Policy[Obs,A,R,N,S]", "kind" : "def"}, {"label" : "contramapReward", "tail" : "(f: (T) ⇒ R)(S: Functor[S]): Policy[Obs, A, T, Cat, S]", "member" : "com.scalarl.Policy.contramapReward", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#contramapReward[T](f:T=>R)(implicitS:cats.Functor[S]):com.scalarl.Policy[Obs,A,T,M,S]", "kind" : "def"}, {"label" : "contramapObservation", "tail" : "(f: (P) ⇒ Obs)(S: Functor[S]): Policy[P, A, R, Cat, S]", "member" : "com.scalarl.Policy.contramapObservation", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#contramapObservation[P](f:P=>Obs)(implicitS:cats.Functor[S]):com.scalarl.Policy[P,A,R,M,S]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Policy.This", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#This=com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/Greedy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/policy\/bandit\/Greedy.html", "kind" : "case class"}, {"name" : "com.scalarl.policy.bandit.UCB", "shortDescription" : "", "object" : "com\/scalarl\/policy\/bandit\/UCB$.html", "members_object" : [{"label" : "Choice", "tail" : "", "member" : "com.scalarl.policy.bandit.UCB.Choice", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#Choice[T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Choice", "tail" : "", "member" : "com.scalarl.policy.bandit.UCB.Choice", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#Choice", "kind" : "object"}, {"label" : "Param", "tail" : "", "member" : "com.scalarl.policy.bandit.UCB.Param", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#ParamextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Config", "tail" : "", "member" : "com.scalarl.policy.bandit.UCB.Config", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#Config[R,T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "fromAggregator", "tail" : "(initial: T, param: Param, agg: Aggregator[R, T, Double]): Config[R, T]", "member" : "com.scalarl.policy.bandit.UCB.fromAggregator", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#fromAggregator[R,T](initial:T,param:com.scalarl.policy.bandit.UCB.Param,agg:com.twitter.algebird.Aggregator[R,T,Double]):com.scalarl.policy.bandit.UCB.Config[R,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/UCB$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "learn", "tail" : "(sars: SARS[Obs, A, R, S]): This", "member" : "com.scalarl.policy.bandit.UCB.learn", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#learn(sars:com.scalarl.SARS[Obs,A,R,S]):UCB.this.This", "kind" : "def"}, {"label" : "choose", "tail" : "(state: State[Obs, A, R, S]): Cat[A]", "member" : "com.scalarl.policy.bandit.UCB.choose", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#choose(state:com.scalarl.State[Obs,A,R,S]):com.scalarl.Cat[A]", "kind" : "def"}, {"member" : "com.scalarl.policy.bandit.UCB#<init>", "error" : "unsupported entity"}, {"label" : "time", "tail" : ": Time", "member" : "com.scalarl.policy.bandit.UCB.time", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#time:com.scalarl.Time", "kind" : "val"}, {"label" : "valueFn", "tail" : ": ActionValueFn[Obs, A, Choice[T]]", "member" : "com.scalarl.policy.bandit.UCB.valueFn", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#valueFn:com.scalarl.ActionValueFn[Obs,A,com.scalarl.policy.bandit.UCB.Choice[T]]", "kind" : "val"}, {"label" : "config", "tail" : ": Config[R, T]", "member" : "com.scalarl.policy.bandit.UCB.config", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#config:com.scalarl.policy.bandit.UCB.Config[R,T]", "kind" : "val"}, {"label" : "mapK", "tail" : "(f: FunctionK[Cat, N]): Policy[Obs, A, R, N, S]", "member" : "com.scalarl.Policy.mapK", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N]):com.scalarl.Policy[Obs,A,R,N,S]", "kind" : "def"}, {"label" : "contramapReward", "tail" : "(f: (T) ⇒ R)(S: Functor[S]): Policy[Obs, A, T, Cat, S]", "member" : "com.scalarl.Policy.contramapReward", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#contramapReward[T](f:T=>R)(implicitS:cats.Functor[S]):com.scalarl.Policy[Obs,A,T,M,S]", "kind" : "def"}, {"label" : "contramapObservation", "tail" : "(f: (P) ⇒ Obs)(S: Functor[S]): Policy[P, A, R, Cat, S]", "member" : "com.scalarl.Policy.contramapObservation", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#contramapObservation[P](f:P=>Obs)(implicitS:cats.Functor[S]):com.scalarl.Policy[P,A,R,M,S]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Policy.This", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#This=com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/policy\/bandit\/UCB.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/policy\/bandit\/UCB.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/policy\/bandit\/UCB.html", "kind" : "case class"}], "com.scalarl" : [{"name" : "com.scalarl.ActionValueFn", "members_trait" : [{"label" : "toEvaluator", "tail" : "(): ActionValue[Obs, A, R, T, S]", "member" : "com.scalarl.ActionValueFn.toEvaluator", "link" : "com\/scalarl\/ActionValueFn.html#toEvaluator[R,S[_]]:com.scalarl.evaluate.ActionValue[Obs,A,R,T,S]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(T: Semigroup[T]): ActionValueFn[Obs, A, T]", "member" : "com.scalarl.ActionValueFn.mergeable", "link" : "com\/scalarl\/ActionValueFn.html#mergeable(implicitT:com.twitter.algebird.Semigroup[T]):com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "def"}, {"label" : "fold", "tail" : "(prepare: (U) ⇒ T, present: (T) ⇒ U): ActionValueFn[Obs, A, U]", "member" : "com.scalarl.ActionValueFn.fold", "link" : "com\/scalarl\/ActionValueFn.html#fold[U](prepare:U=>T,present:T=>U):com.scalarl.ActionValueFn[Obs,A,U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/ActionValueFn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/ActionValueFn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/ActionValueFn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/ActionValueFn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/ActionValueFn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/ActionValueFn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/ActionValueFn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/ActionValueFn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/ActionValueFn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/ActionValueFn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/ActionValueFn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/ActionValueFn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/ActionValueFn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/ActionValueFn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/ActionValueFn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/ActionValueFn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(obs: Obs, action: A, value: T): ActionValueFn[Obs, A, T]", "member" : "com.scalarl.ActionValueFn.update", "link" : "com\/scalarl\/ActionValueFn.html#update(obs:Obs,action:A,value:T):com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "abstract def"}, {"label" : "actionValue", "tail" : "(obs: Obs, a: A): T", "member" : "com.scalarl.ActionValueFn.actionValue", "link" : "com\/scalarl\/ActionValueFn.html#actionValue(obs:Obs,a:A):T", "kind" : "abstract def"}, {"label" : "seen", "tail" : "(obs: Obs): Iterable[A]", "member" : "com.scalarl.ActionValueFn.seen", "link" : "com\/scalarl\/ActionValueFn.html#seen(obs:Obs):Iterable[A]", "kind" : "abstract def"}, {"label" : "seenStates", "tail" : "(): Iterable[Obs]", "member" : "com.scalarl.ActionValueFn.seenStates", "link" : "com\/scalarl\/ActionValueFn.html#seenStates:Iterable[Obs]", "kind" : "abstract def"}], "shortDescription" : "  Along with StateValueFn, this is the main trait in tabular reinforcement  learning for tracking the value of an (observation, action) pair.", "object" : "com\/scalarl\/ActionValueFn$.html", "members_object" : [{"label" : "Mergeable", "tail" : "", "member" : "com.scalarl.ActionValueFn.Mergeable", "link" : "com\/scalarl\/ActionValueFn$.html#Mergeable[Obs,A,T]extendsActionValueFn[Obs,A,T]", "kind" : "class"}, {"label" : "Folded", "tail" : "", "member" : "com.scalarl.ActionValueFn.Folded", "link" : "com\/scalarl\/ActionValueFn$.html#Folded[Obs,A,T,U]extendsActionValueFn[Obs,A,U]", "kind" : "class"}, {"label" : "Base", "tail" : "", "member" : "com.scalarl.ActionValueFn.Base", "link" : "com\/scalarl\/ActionValueFn$.html#Base[Obs,A,T]extendsActionValueFn[Obs,A,T]", "kind" : "class"}, {"label" : "fromAggregator", "tail" : "(agg: MonoidAggregator[U, T, U]): ActionValueFn[Obs, A, U]", "member" : "com.scalarl.ActionValueFn.fromAggregator", "link" : "com\/scalarl\/ActionValueFn$.html#fromAggregator[Obs,A,T,U](agg:com.twitter.algebird.MonoidAggregator[U,T,U]):com.scalarl.ActionValueFn[Obs,A,U]", "kind" : "def"}, {"label" : "fromAggregator", "tail" : "(default: T, agg: Aggregator[U, T, U]): ActionValueFn[Obs, A, U]", "member" : "com.scalarl.ActionValueFn.fromAggregator", "link" : "com\/scalarl\/ActionValueFn$.html#fromAggregator[Obs,A,T,U](default:T,agg:com.twitter.algebird.Aggregator[U,T,U]):com.scalarl.ActionValueFn[Obs,A,U]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(default: T)(T: Semigroup[T]): ActionValueFn[Obs, A, T]", "member" : "com.scalarl.ActionValueFn.mergeable", "link" : "com\/scalarl\/ActionValueFn$.html#mergeable[Obs,A,T](default:T)(implicitT:com.twitter.algebird.Semigroup[T]):com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(T: Monoid[T]): ActionValueFn[Obs, A, T]", "member" : "com.scalarl.ActionValueFn.mergeable", "link" : "com\/scalarl\/ActionValueFn$.html#mergeable[Obs,A,T](implicitT:com.twitter.algebird.Monoid[T]):com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(default: T): ActionValueFn[Obs, A, T]", "member" : "com.scalarl.ActionValueFn.empty", "link" : "com\/scalarl\/ActionValueFn$.html#empty[Obs,A,T](default:T):com.scalarl.ActionValueFn[Obs,A,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ActionValueFn[Obs, A, Option[T]]", "member" : "com.scalarl.ActionValueFn.empty", "link" : "com\/scalarl\/ActionValueFn$.html#empty[Obs,A,T]:com.scalarl.ActionValueFn[Obs,A,Option[T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/ActionValueFn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/ActionValueFn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/ActionValueFn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/ActionValueFn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/ActionValueFn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/ActionValueFn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/ActionValueFn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/ActionValueFn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/ActionValueFn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/ActionValueFn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/ActionValueFn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/ActionValueFn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/ActionValueFn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/ActionValueFn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/ActionValueFn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/ActionValueFn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/ActionValueFn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/ActionValueFn.html", "kind" : "trait"}, {"name" : "com.scalarl.Agent", "members_trait" : [{"label" : "play", "tail" : "(state: State[Obs, A, R, M]): M[(State.This, SARS[Obs, A, R, M])]", "member" : "com.scalarl.Agent.play", "link" : "com\/scalarl\/Agent.html#play(state:com.scalarl.State[Obs,A,R,M]):M[(state.This,com.scalarl.SARS[Obs,A,R,M])]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Agent.This", "link" : "com\/scalarl\/Agent.html#This=com.scalarl.Agent[Obs,A,R,T,M]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Agent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Agent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Agent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Agent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Agent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Agent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Agent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Agent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Agent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Agent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Agent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Agent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Agent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Agent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Agent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Agent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valueFunction", "tail" : "(): StateValueFn[Obs, T]", "member" : "com.scalarl.Agent.valueFunction", "link" : "com\/scalarl\/Agent.html#valueFunction:com.scalarl.StateValueFn[Obs,T]", "kind" : "abstract def"}, {"label" : "policy", "tail" : "(): Policy[Obs, A, R, M, M]", "member" : "com.scalarl.Agent.policy", "link" : "com\/scalarl\/Agent.html#policy:com.scalarl.Policy[Obs,A,R,M,M]", "kind" : "abstract def"}, {"label" : "monad", "tail" : "(): Monad[M]", "member" : "com.scalarl.Agent.monad", "link" : "com\/scalarl\/Agent.html#monad:cats.Monad[M]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/scalarl\/Agent$.html", "members_object" : [{"label" : "StaticAgent", "tail" : "", "member" : "com.scalarl.Agent.StaticAgent", "link" : "com\/scalarl\/Agent$.html#StaticAgent[Obs,A,R,T,M[_]]extendsAgent[Obs,A,R,T,M]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Agent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Agent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Agent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Agent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Agent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Agent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Agent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Agent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Agent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Agent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Agent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Agent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Agent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Agent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Agent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Agent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Agent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/Agent.html", "kind" : "trait"}, {"name" : "com.scalarl.Evaluator", "shortDescription" : "  Contains traits and instances for the two evaluation methods.", "object" : "com\/scalarl\/Evaluator$.html", "members_object" : [{"label" : "FromAction", "tail" : "", "member" : "com.scalarl.Evaluator.FromAction", "link" : "com\/scalarl\/Evaluator$.html#FromAction[Obs,A,R,G,S[_],F[_,_,_,_,*[_]]]extendsAnyRef", "kind" : "class"}, {"label" : "FromState", "tail" : "", "member" : "com.scalarl.Evaluator.FromState", "link" : "com\/scalarl\/Evaluator$.html#FromState[Obs,A,R,G,S[_],F[_,_,_,_,*[_]]]extendsAnyRef", "kind" : "class"}, {"label" : "action", "tail" : "(): FromAction[Obs, A, R, G, S, ActionValue]", "member" : "com.scalarl.Evaluator.action", "link" : "com\/scalarl\/Evaluator$.html#action[Obs,A,R,G,S[_]]:com.scalarl.Evaluator.FromAction[Obs,A,R,G,S,com.scalarl.evaluate.ActionValue]", "kind" : "def"}, {"label" : "state", "tail" : "(): FromState[Obs, A, R, G, S, StateValue]", "member" : "com.scalarl.Evaluator.state", "link" : "com\/scalarl\/Evaluator$.html#state[Obs,A,R,G,S[_]]:com.scalarl.Evaluator.FromState[Obs,A,R,G,S,com.scalarl.evaluate.StateValue]", "kind" : "def"}, {"label" : "bellman", "tail" : "(valueFn: StateValueFn[Obs, G], policy: Policy[Obs, A, R, M, S], prepare: (R) ⇒ G, merge: (G, G) ⇒ G)(arg0: DModule[G], arg1: Expectation[M], arg2: Expectation[S]): StateValue[Obs, A, R, G, S]", "member" : "com.scalarl.Evaluator.bellman", "link" : "com\/scalarl\/Evaluator$.html#bellman[Obs,A,R,G,M[_],S[_]](valueFn:com.scalarl.StateValueFn[Obs,G],policy:com.scalarl.Policy[Obs,A,R,M,S],prepare:R=>G,merge:(G,G)=>G)(implicitevidence$3:com.scalarl.algebra.Module.DModule[G],implicitevidence$4:com.scalarl.algebra.Expectation[M],implicitevidence$5:com.scalarl.algebra.Expectation[S]):com.scalarl.evaluate.StateValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "oneAhead", "tail" : "(valueFn: StateValueFn[Obs, G], prepare: (R) ⇒ G, merge: (G, G) ⇒ G)(arg0: DModule[G], arg1: Expectation[S]): ActionValue[Obs, A, R, G, S]", "member" : "com.scalarl.Evaluator.oneAhead", "link" : "com\/scalarl\/Evaluator$.html#oneAhead[Obs,A,R,G,M[_],S[_]](valueFn:com.scalarl.StateValueFn[Obs,G],prepare:R=>G,merge:(G,G)=>G)(implicitevidence$1:com.scalarl.algebra.Module.DModule[G],implicitevidence$2:com.scalarl.algebra.Expectation[S]):com.scalarl.evaluate.ActionValue[Obs,A,R,G,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Evaluator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Evaluator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Evaluator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Evaluator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Evaluator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Evaluator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Evaluator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Evaluator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Evaluator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Evaluator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Evaluator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Evaluator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Evaluator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Evaluator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Evaluator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Evaluator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Evaluator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Evaluator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Evaluator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.Policy", "members_trait" : [{"label" : "mapK", "tail" : "(f: FunctionK[M, N]): Policy[Obs, A, R, N, S]", "member" : "com.scalarl.Policy.mapK", "link" : "com\/scalarl\/Policy.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N]):com.scalarl.Policy[Obs,A,R,N,S]", "kind" : "def"}, {"label" : "contramapReward", "tail" : "(f: (T) ⇒ R)(S: Functor[S]): Policy[Obs, A, T, M, S]", "member" : "com.scalarl.Policy.contramapReward", "link" : "com\/scalarl\/Policy.html#contramapReward[T](f:T=>R)(implicitS:cats.Functor[S]):com.scalarl.Policy[Obs,A,T,M,S]", "kind" : "def"}, {"label" : "contramapObservation", "tail" : "(f: (P) ⇒ Obs)(S: Functor[S]): Policy[P, A, R, M, S]", "member" : "com.scalarl.Policy.contramapObservation", "link" : "com\/scalarl\/Policy.html#contramapObservation[P](f:P=>Obs)(implicitS:cats.Functor[S]):com.scalarl.Policy[P,A,R,M,S]", "kind" : "def"}, {"label" : "learn", "tail" : "(sars: SARS[Obs, A, R, S]): This", "member" : "com.scalarl.Policy.learn", "link" : "com\/scalarl\/Policy.html#learn(sars:com.scalarl.SARS[Obs,A,R,S]):Policy.this.This", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.Policy.This", "link" : "com\/scalarl\/Policy.html#This=com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Policy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Policy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Policy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Policy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Policy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Policy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Policy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Policy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Policy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Policy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Policy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Policy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Policy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Policy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Policy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Policy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "choose", "tail" : "(state: State[Obs, A, R, S]): M[A]", "member" : "com.scalarl.Policy.choose", "link" : "com\/scalarl\/Policy.html#choose(state:com.scalarl.State[Obs,A,R,S]):M[A]", "kind" : "abstract def"}], "shortDescription" : "This is how agents actually choose what comes next.", "object" : "com\/scalarl\/Policy$.html", "members_object" : [{"label" : "constant", "tail" : "(a: A): Policy[Obs, A, R, Id, S]", "member" : "com.scalarl.Policy.constant", "link" : "com\/scalarl\/Policy$.html#constant[Obs,A,R,S[_]](a:A):com.scalarl.Policy[Obs,A,R,cats.Id,S]", "kind" : "def"}, {"label" : "epsilonGreedy", "tail" : "(evaluator: ActionValue[Obs, A, R, T, S], epsilon: Double)(arg0: Ordering[T]): Greedy[Obs, A, R, T, S]", "member" : "com.scalarl.Policy.epsilonGreedy", "link" : "com\/scalarl\/Policy$.html#epsilonGreedy[Obs,A,R,T,S[_]](evaluator:com.scalarl.evaluate.ActionValue[Obs,A,R,T,S],epsilon:Double)(implicitevidence$2:Ordering[T]):com.scalarl.policy.Greedy[Obs,A,R,T,S]", "kind" : "def"}, {"label" : "greedy", "tail" : "(evaluator: ActionValue[Obs, A, R, T, S])(arg0: Ordering[T]): Policy[Obs, A, R, Cat, S]", "member" : "com.scalarl.Policy.greedy", "link" : "com\/scalarl\/Policy$.html#greedy[Obs,A,R,T,S[_]](evaluator:com.scalarl.evaluate.ActionValue[Obs,A,R,T,S])(implicitevidence$1:Ordering[T]):com.scalarl.Policy[Obs,A,R,com.scalarl.Cat,S]", "kind" : "def"}, {"label" : "random", "tail" : "(): Policy[Obs, A, R, Cat, S]", "member" : "com.scalarl.Policy.random", "link" : "com\/scalarl\/Policy$.html#random[Obs,A,R,S[_]]:com.scalarl.Policy[Obs,A,R,com.scalarl.Cat,S]", "kind" : "def"}, {"label" : "choose", "tail" : "(chooseFn: (State[Obs, A, R, S]) ⇒ M[A]): Policy[Obs, A, R, M, S]", "member" : "com.scalarl.Policy.choose", "link" : "com\/scalarl\/Policy$.html#choose[Obs,A,R,M[_],S[_]](chooseFn:com.scalarl.State[Obs,A,R,S]=>M[A]):com.scalarl.Policy[Obs,A,R,M,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Policy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Policy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Policy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Policy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Policy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Policy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Policy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Policy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Policy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Policy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Policy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Policy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Policy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Policy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Policy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Policy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Policy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/Policy.html", "kind" : "trait"}, {"name" : "com.scalarl.SARS", "shortDescription" : "  Chunk that you get back for playing an episode.", "members_case class" : [{"label" : "mapReward", "tail" : "(f: (R) ⇒ T)(S: Functor[S]): SARS[Obs, A, T, S]", "member" : "com.scalarl.SARS.mapReward", "link" : "com\/scalarl\/SARS.html#mapReward[T](f:R=>T)(implicitS:cats.Functor[S]):com.scalarl.SARS[Obs,A,T,S]", "kind" : "def"}, {"label" : "mapObservation", "tail" : "(f: (Obs) ⇒ P)(S: Functor[S]): SARS[P, A, R, S]", "member" : "com.scalarl.SARS.mapObservation", "link" : "com\/scalarl\/SARS.html#mapObservation[P](f:Obs=>P)(implicitS:cats.Functor[S]):com.scalarl.SARS[P,A,R,S]", "kind" : "def"}, {"member" : "com.scalarl.SARS#<init>", "error" : "unsupported entity"}, {"label" : "nextState", "tail" : ": State[Obs, A, R, S]", "member" : "com.scalarl.SARS.nextState", "link" : "com\/scalarl\/SARS.html#nextState:com.scalarl.State[Obs,A,R,S]", "kind" : "val"}, {"label" : "reward", "tail" : ": R", "member" : "com.scalarl.SARS.reward", "link" : "com\/scalarl\/SARS.html#reward:R", "kind" : "val"}, {"label" : "action", "tail" : ": A", "member" : "com.scalarl.SARS.action", "link" : "com\/scalarl\/SARS.html#action:A", "kind" : "val"}, {"label" : "state", "tail" : ": State[Obs, A, R, S]", "member" : "com.scalarl.SARS.state", "link" : "com\/scalarl\/SARS.html#state:com.scalarl.State[Obs,A,R,S]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/SARS.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/SARS.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/SARS.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/SARS.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/SARS.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/SARS.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/SARS.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/SARS.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/SARS.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/SARS.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/SARS.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/SARS.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/SARS.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/SARS.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/SARS.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/SARS.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/SARS.html", "kind" : "case class"}, {"name" : "com.scalarl.State", "members_trait" : [{"label" : "mapK", "tail" : "(f: FunctionK[M, N])(N: Functor[N]): State[Obs, A, R, N]", "member" : "com.scalarl.State.mapK", "link" : "com\/scalarl\/State.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N])(implicitN:cats.Functor[N]):com.scalarl.State[Obs,A,R,N]", "kind" : "def"}, {"label" : "mapReward", "tail" : "(f: (R) ⇒ T)(M: Functor[M]): State[Obs, A, T, M]", "member" : "com.scalarl.State.mapReward", "link" : "com\/scalarl\/State.html#mapReward[T](f:R=>T)(implicitM:cats.Functor[M]):com.scalarl.State[Obs,A,T,M]", "kind" : "def"}, {"label" : "mapObservation", "tail" : "(f: (Obs) ⇒ P)(M: Functor[M]): State[P, A, R, M]", "member" : "com.scalarl.State.mapObservation", "link" : "com\/scalarl\/State.html#mapObservation[P](f:Obs=>P)(implicitM:cats.Functor[M]):com.scalarl.State[P,A,R,M]", "kind" : "def"}, {"label" : "isTerminal", "tail" : "(): Boolean", "member" : "com.scalarl.State.isTerminal", "link" : "com\/scalarl\/State.html#isTerminal:Boolean", "kind" : "def"}, {"label" : "act", "tail" : "(action: A): M[(R, This)]", "member" : "com.scalarl.State.act", "link" : "com\/scalarl\/State.html#act(action:A):M[(R,State.this.This)]", "kind" : "def"}, {"label" : "actions", "tail" : "(): Set[A]", "member" : "com.scalarl.State.actions", "link" : "com\/scalarl\/State.html#actions:Set[A]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.State.This", "link" : "com\/scalarl\/State.html#This=com.scalarl.State[Obs,A,R,M]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/State.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/State.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/State.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/State.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/State.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/State.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/State.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/State.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/State.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/State.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/State.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/State.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/State.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/State.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/State.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/State.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invalidMove", "tail" : "(): M[(R, This)]", "member" : "com.scalarl.State.invalidMove", "link" : "com\/scalarl\/State.html#invalidMove:M[(R,State.this.This)]", "kind" : "abstract def"}, {"label" : "dynamics", "tail" : "(): Map[A, M[(R, This)]]", "member" : "com.scalarl.State.dynamics", "link" : "com\/scalarl\/State.html#dynamics:Map[A,M[(R,State.this.This)]]", "kind" : "abstract def"}, {"label" : "observation", "tail" : "(): Obs", "member" : "com.scalarl.State.observation", "link" : "com\/scalarl\/State.html#observation:Obs", "kind" : "abstract def"}], "shortDescription" : "A world should probably have a generator of states andactions...", "object" : "com\/scalarl\/State$.html", "members_object" : [{"label" : "Dynamics", "tail" : "", "member" : "com.scalarl.State.Dynamics", "link" : "com\/scalarl\/State$.html#Dynamics[Obs,A,R,M[_]]=Map[A,com.scalarl.State.ActionView[Obs,A,R,M]]", "kind" : "type"}, {"label" : "ActionView", "tail" : "", "member" : "com.scalarl.State.ActionView", "link" : "com\/scalarl\/State$.html#ActionView[Obs,A,R,M[_]]=M[(R,com.scalarl.State[Obs,A,R,M])]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/State$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/State$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/State$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/State$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/State$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/State$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/State$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/State$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/State$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/State$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/State$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/State$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/State$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/State$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/State$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/State$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/State$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/State.html", "kind" : "trait"}, {"name" : "com.scalarl.StateValueFn", "members_trait" : [{"label" : "toEvaluator", "tail" : "(): StateValue[Obs, A, R, T, S]", "member" : "com.scalarl.StateValueFn.toEvaluator", "link" : "com\/scalarl\/StateValueFn.html#toEvaluator[A,R,S[_]]:com.scalarl.evaluate.StateValue[Obs,A,R,T,S]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(T: Semigroup[T]): StateValueFn[Obs, T]", "member" : "com.scalarl.StateValueFn.mergeable", "link" : "com\/scalarl\/StateValueFn.html#mergeable(implicitT:com.twitter.algebird.Semigroup[T]):com.scalarl.StateValueFn[Obs,T]", "kind" : "def"}, {"label" : "fold", "tail" : "(prepare: (U) ⇒ T, present: (T) ⇒ U): StateValueFn[Obs, U]", "member" : "com.scalarl.StateValueFn.fold", "link" : "com\/scalarl\/StateValueFn.html#fold[U](prepare:U=>T,present:T=>U):com.scalarl.StateValueFn[Obs,U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/StateValueFn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/StateValueFn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/StateValueFn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/StateValueFn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/StateValueFn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/StateValueFn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/StateValueFn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/StateValueFn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/StateValueFn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/StateValueFn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/StateValueFn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/StateValueFn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/StateValueFn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/StateValueFn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/StateValueFn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/StateValueFn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(state: Obs, value: T): StateValueFn[Obs, T]", "member" : "com.scalarl.StateValueFn.update", "link" : "com\/scalarl\/StateValueFn.html#update(state:Obs,value:T):com.scalarl.StateValueFn[Obs,T]", "kind" : "abstract def"}, {"label" : "stateValue", "tail" : "(obs: Obs): T", "member" : "com.scalarl.StateValueFn.stateValue", "link" : "com\/scalarl\/StateValueFn.html#stateValue(obs:Obs):T", "kind" : "abstract def"}, {"label" : "seen", "tail" : "(): Iterable[Obs]", "member" : "com.scalarl.StateValueFn.seen", "link" : "com\/scalarl\/StateValueFn.html#seen:Iterable[Obs]", "kind" : "abstract def"}], "shortDescription" : "  Along with ActionValueFn, this is the main trait in tabular reinforcement  learning for tracking the value of a state as evidenced by the observation it  returns.", "object" : "com\/scalarl\/StateValueFn$.html", "members_object" : [{"label" : "Mergeable", "tail" : "", "member" : "com.scalarl.StateValueFn.Mergeable", "link" : "com\/scalarl\/StateValueFn$.html#Mergeable[Obs,T]extendsStateValueFn[Obs,T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Folded", "tail" : "", "member" : "com.scalarl.StateValueFn.Folded", "link" : "com\/scalarl\/StateValueFn$.html#Folded[Obs,T,U]extendsStateValueFn[Obs,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Base", "tail" : "", "member" : "com.scalarl.StateValueFn.Base", "link" : "com\/scalarl\/StateValueFn$.html#Base[Obs,T]extendsStateValueFn[Obs,T]withProductwithSerializable", "kind" : "case class"}, {"label" : "fromAggregator", "tail" : "(agg: MonoidAggregator[U, T, U]): StateValueFn[Obs, U]", "member" : "com.scalarl.StateValueFn.fromAggregator", "link" : "com\/scalarl\/StateValueFn$.html#fromAggregator[Obs,T,U](agg:com.twitter.algebird.MonoidAggregator[U,T,U]):com.scalarl.StateValueFn[Obs,U]", "kind" : "def"}, {"label" : "fromAggregator", "tail" : "(default: T, agg: Aggregator[U, T, U]): StateValueFn[Obs, U]", "member" : "com.scalarl.StateValueFn.fromAggregator", "link" : "com\/scalarl\/StateValueFn$.html#fromAggregator[Obs,T,U](default:T,agg:com.twitter.algebird.Aggregator[U,T,U]):com.scalarl.StateValueFn[Obs,U]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(default: T)(T: Semigroup[T]): StateValueFn[Obs, T]", "member" : "com.scalarl.StateValueFn.mergeable", "link" : "com\/scalarl\/StateValueFn$.html#mergeable[Obs,T](default:T)(implicitT:com.twitter.algebird.Semigroup[T]):com.scalarl.StateValueFn[Obs,T]", "kind" : "def"}, {"label" : "mergeable", "tail" : "(T: Monoid[T]): StateValueFn[Obs, T]", "member" : "com.scalarl.StateValueFn.mergeable", "link" : "com\/scalarl\/StateValueFn$.html#mergeable[Obs,T](implicitT:com.twitter.algebird.Monoid[T]):com.scalarl.StateValueFn[Obs,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(default: T): StateValueFn[Obs, T]", "member" : "com.scalarl.StateValueFn.empty", "link" : "com\/scalarl\/StateValueFn$.html#empty[Obs,T](default:T):com.scalarl.StateValueFn[Obs,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): StateValueFn[Obs, Option[T]]", "member" : "com.scalarl.StateValueFn.empty", "link" : "com\/scalarl\/StateValueFn$.html#empty[Obs,T]:com.scalarl.StateValueFn[Obs,Option[T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/StateValueFn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/StateValueFn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/StateValueFn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/StateValueFn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/StateValueFn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/StateValueFn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/StateValueFn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/StateValueFn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/StateValueFn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/StateValueFn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/StateValueFn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/StateValueFn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/StateValueFn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/StateValueFn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/StateValueFn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/StateValueFn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/StateValueFn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/StateValueFn.html", "kind" : "trait"}, {"name" : "com.scalarl.Time", "shortDescription" : "", "object" : "com\/scalarl\/Time$.html", "members_object" : [{"label" : "Zero", "tail" : ": Time", "member" : "com.scalarl.Time.Zero", "link" : "com\/scalarl\/Time$.html#Zero:com.scalarl.Time", "kind" : "val"}, {"label" : "Max", "tail" : ": Time", "member" : "com.scalarl.Time.Max", "link" : "com\/scalarl\/Time$.html#Max:com.scalarl.Time", "kind" : "val"}, {"label" : "Min", "tail" : ": Time", "member" : "com.scalarl.Time.Min", "link" : "com\/scalarl\/Time$.html#Min:com.scalarl.Time", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Time$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Time$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Time$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Time$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Time$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Time$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Time$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Time$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Time$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Time$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Time$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Time$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Time$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Time$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Time$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Time$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Time$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Time$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Time$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "compareTo", "tail" : "(r: Time): Int", "member" : "com.scalarl.Time.compareTo", "link" : "com\/scalarl\/Time.html#compareTo(r:com.scalarl.Time):Int", "kind" : "def"}, {"label" : "<", "tail" : "(r: Time): Boolean", "member" : "com.scalarl.Time.<", "link" : "com\/scalarl\/Time.html#<(r:com.scalarl.Time):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(r: Time): Boolean", "member" : "com.scalarl.Time.<=", "link" : "com\/scalarl\/Time.html#<=(r:com.scalarl.Time):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(r: Time): Long", "member" : "com.scalarl.Time.+", "link" : "com\/scalarl\/Time.html#+(r:com.scalarl.Time):Long", "kind" : "def"}, {"label" : "-", "tail" : "(r: Time): Long", "member" : "com.scalarl.Time.-", "link" : "com\/scalarl\/Time.html#-(r:com.scalarl.Time):Long", "kind" : "def"}, {"label" : "tick", "tail" : "(): Time", "member" : "com.scalarl.Time.tick", "link" : "com\/scalarl\/Time.html#tick:com.scalarl.Time", "kind" : "def"}, {"member" : "com.scalarl.Time#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Long", "member" : "com.scalarl.Time.value", "link" : "com\/scalarl\/Time.html#value:Long", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/scalarl\/Time.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/scalarl\/Time.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Time.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Time.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/scalarl\/Time.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/scalarl\/Time.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/Time.html", "kind" : "case class"}, {"name" : "com.scalarl.Util", "shortDescription" : "", "object" : "com\/scalarl\/Util$.html", "members_object" : [{"label" : "mfk", "tail" : "(M: Comonad[M], N: Monad[N]): FunctionK[M, N]", "member" : "com.scalarl.Util.mfk", "link" : "com\/scalarl\/Util$.html#mfk[M[_],N[_]](implicitM:cats.Comonad[M],implicitN:cats.Monad[N]):cats.arrow.FunctionK[M,N]", "kind" : "def"}, {"label" : "idToMonad", "tail" : "(M: Monad[M]): FunctionK[Id, M]", "member" : "com.scalarl.Util.idToMonad", "link" : "com\/scalarl\/Util$.html#idToMonad[M[_]](implicitM:cats.Monad[M]):cats.arrow.FunctionK[cats.Id,M]", "kind" : "def"}, {"label" : "diff", "tail" : "(as: TraversableOnce[A], lf: (A) ⇒ Double, rf: (A) ⇒ Double, combine: (Double, Double) ⇒ Double): Double", "member" : "com.scalarl.Util.diff", "link" : "com\/scalarl\/Util$.html#diff[A](as:TraversableOnce[A],lf:A=>Double,rf:A=>Double,combine:(Double,Double)=>Double):Double", "kind" : "def"}, {"label" : "runUntilM", "tail" : "(state: StateT[M, S, A], agg: MonoidAggregator[A, B, C])(p: (S) ⇒ Boolean)(arg0: Monad[M]): StateT[M, S, C]", "member" : "com.scalarl.Util.runUntilM", "link" : "com\/scalarl\/Util$.html#runUntilM[M[_],S,A,B,C](state:cats.data.StateT[M,S,A],agg:com.twitter.algebird.MonoidAggregator[A,B,C])(p:S=>Boolean)(implicitevidence$5:cats.Monad[M]):cats.data.StateT[M,S,C]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A, agg: MonoidAggregator[B, C, D])(f: (A) ⇒ M[(A, B)])(p: (A) ⇒ Boolean)(arg0: Monad[M]): M[(A, D)]", "member" : "com.scalarl.Util.iterateWhileM", "link" : "com\/scalarl\/Util$.html#iterateWhileM[M[_],A,B,C,D](init:A,agg:com.twitter.algebird.MonoidAggregator[B,C,D])(f:A=>M[(A,B)])(p:A=>Boolean)(implicitevidence$4:cats.Monad[M]):M[(A,D)]", "kind" : "def"}, {"label" : "aggToFold", "tail" : "(agg: MonoidAggregator[A, B, C]): Fold[A, C]", "member" : "com.scalarl.Util.aggToFold", "link" : "com\/scalarl\/Util$.html#aggToFold[A,B,C](agg:com.twitter.algebird.MonoidAggregator[A,B,C]):com.twitter.algebird.Fold[A,C]", "kind" : "def"}, {"label" : "foldUntilM", "tail" : "(init: A, fold: Fold[B, C])(f: (A) ⇒ M[(A, B)])(p: (A) ⇒ Boolean)(M: Monad[M]): M[(A, C)]", "member" : "com.scalarl.Util.foldUntilM", "link" : "com\/scalarl\/Util$.html#foldUntilM[M[_],A,B,C](init:A,fold:com.twitter.algebird.Fold[B,C])(f:A=>M[(A,B)])(p:A=>Boolean)(implicitM:cats.Monad[M]):M[(A,C)]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A, agg: MonoidAggregator[B, C, D])(f: (A) ⇒ M[(A, B)])(p: (A) ⇒ Boolean)(M: Monad[M]): M[(A, D)]", "member" : "com.scalarl.Util.iterateUntilM", "link" : "com\/scalarl\/Util$.html#iterateUntilM[M[_],A,B,C,D](init:A,agg:com.twitter.algebird.MonoidAggregator[B,C,D])(f:A=>M[(A,B)])(p:A=>Boolean)(implicitM:cats.Monad[M]):M[(A,D)]", "kind" : "def"}, {"label" : "iterateM", "tail" : "(n: Int)(a: A)(f: (A) ⇒ M[A])(M: Monad[M]): M[A]", "member" : "com.scalarl.Util.iterateM", "link" : "com\/scalarl\/Util$.html#iterateM[M[_],A](n:Int)(a:A)(f:A=>M[A])(implicitM:cats.Monad[M]):M[A]", "kind" : "def"}, {"label" : "allMaxBy", "tail" : "(as: Set[A])(f: (A) ⇒ B)(arg0: Ordering[B]): Set[A]", "member" : "com.scalarl.Util.allMaxBy", "link" : "com\/scalarl\/Util$.html#allMaxBy[A,B](as:Set[A])(f:A=>B)(implicitevidence$3:Ordering[B]):Set[A]", "kind" : "def"}, {"label" : "maxKeys", "tail" : "(m: Map[A, B])(arg0: Ordering[B]): Set[A]", "member" : "com.scalarl.Util.maxKeys", "link" : "com\/scalarl\/Util$.html#maxKeys[A,B](m:Map[A,B])(implicitevidence$2:Ordering[B]):Set[A]", "kind" : "def"}, {"label" : "mergeV", "tail" : "(m: Map[K, V], k: K, delta: V)(arg0: Semigroup[V]): Map[K, V]", "member" : "com.scalarl.Util.mergeV", "link" : "com\/scalarl\/Util$.html#mergeV[K,V](m:Map[K,V],k:K,delta:V)(implicitevidence$1:com.twitter.algebird.Semigroup[V]):Map[K,V]", "kind" : "def"}, {"label" : "updateWith", "tail" : "(m: Map[K, V], k: K)(f: (Option[V]) ⇒ V): Map[K, V]", "member" : "com.scalarl.Util.updateWith", "link" : "com\/scalarl\/Util$.html#updateWith[K,V](m:Map[K,V],k:K)(f:Option[V]=>V):Map[K,V]", "kind" : "def"}, {"label" : "makeMapUnsafe", "tail" : "(keys: TraversableOnce[K])(f: (K) ⇒ V): Map[K, V]", "member" : "com.scalarl.Util.makeMapUnsafe", "link" : "com\/scalarl\/Util$.html#makeMapUnsafe[K,V](keys:TraversableOnce[K])(f:K=>V):Map[K,V]", "kind" : "def"}, {"label" : "makeMap", "tail" : "(keys: Set[K])(f: (K) ⇒ V): Map[K, V]", "member" : "com.scalarl.Util.makeMap", "link" : "com\/scalarl\/Util$.html#makeMap[K,V](keys:Set[K])(f:K=>V):Map[K,V]", "kind" : "def"}, {"label" : "confine", "tail" : "(a: A, min: A, max: A)(ord: Ordering[A]): A", "member" : "com.scalarl.Util.confine", "link" : "com\/scalarl\/Util$.html#confine[A](a:A,min:A,max:A)(implicitord:Ordering[A]):A", "kind" : "def"}, {"label" : "Instances", "tail" : "", "member" : "com.scalarl.Util.Instances", "link" : "com\/scalarl\/Util$.html#Instances", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/Util$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/Util$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/Util$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/Util$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/Util$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/Util$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/Util$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Util$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Util$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/Util$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/Util$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/Util$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/Util$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/Util$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/Util$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/Util$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/Util$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/Util$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/Util$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.scalarl.state" : [{"name" : "com.scalarl.state.MapState", "shortDescription" : "MDP with a single state.", "object" : "com\/scalarl\/state\/MapState$.html", "members_object" : [{"label" : "updating", "tail" : "(actions: Set[A], initialObservation: Obs, penalty: Generator[R], gen: Generator[Generator[R]], step: (Obs, A, R, Generator[R]) ⇒ (Obs, Generator[R])): Generator[MapState[Obs, A, R, Generator]]", "member" : "com.scalarl.state.MapState.updating", "link" : "com\/scalarl\/state\/MapState$.html#updating[Obs,A,R](actions:Set[A],initialObservation:Obs,penalty:com.stripe.rainier.core.Generator[R],gen:com.stripe.rainier.core.Generator[com.stripe.rainier.core.Generator[R]],step:(Obs,A,R,com.stripe.rainier.core.Generator[R])=>(Obs,com.stripe.rainier.core.Generator[R])):com.stripe.rainier.core.Generator[com.scalarl.state.MapState[Obs,A,R,com.stripe.rainier.core.Generator]]", "kind" : "def"}, {"label" : "static", "tail" : "(actions: Set[A], penalty: Generator[R], gen: Generator[Generator[R]]): Generator[StaticMapState[A, R, Generator]]", "member" : "com.scalarl.state.MapState.static", "link" : "com\/scalarl\/state\/MapState$.html#static[A,R](actions:Set[A],penalty:com.stripe.rainier.core.Generator[R],gen:com.stripe.rainier.core.Generator[com.stripe.rainier.core.Generator[R]]):com.stripe.rainier.core.Generator[com.scalarl.state.StaticMapState[A,R,com.stripe.rainier.core.Generator]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/state\/MapState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/state\/MapState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/state\/MapState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/state\/MapState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/state\/MapState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/state\/MapState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/state\/MapState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/state\/MapState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/state\/MapState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/state\/MapState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/state\/MapState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/state\/MapState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/state\/MapState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/state\/MapState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/state\/MapState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/state\/MapState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "dynamics", "tail" : "(): Map[A, S[(R, This)]]", "member" : "com.scalarl.state.MapState.dynamics", "link" : "com\/scalarl\/state\/MapState.html#dynamics:Map[A,S[(R,MapState.this.This)]]", "kind" : "def"}, {"label" : "invalidMove", "tail" : ": S[(R, This)]", "member" : "com.scalarl.state.MapState.invalidMove", "link" : "com\/scalarl\/state\/MapState.html#invalidMove:S[(R,MapState.this.This)]", "kind" : "val"}, {"member" : "com.scalarl.state.MapState#<init>", "error" : "unsupported entity"}, {"label" : "step", "tail" : ": (Obs, A, R, S[R]) ⇒ (Obs, S[R])", "member" : "com.scalarl.state.MapState.step", "link" : "com\/scalarl\/state\/MapState.html#step:(Obs,A,R,S[R])=>(Obs,S[R])", "kind" : "val"}, {"label" : "penalty", "tail" : ": S[R]", "member" : "com.scalarl.state.MapState.penalty", "link" : "com\/scalarl\/state\/MapState.html#penalty:S[R]", "kind" : "val"}, {"label" : "rewards", "tail" : ": Map[A, S[R]]", "member" : "com.scalarl.state.MapState.rewards", "link" : "com\/scalarl\/state\/MapState.html#rewards:Map[A,S[R]]", "kind" : "val"}, {"label" : "observation", "tail" : ": Obs", "member" : "com.scalarl.state.MapState.observation", "link" : "com\/scalarl\/state\/MapState.html#observation:Obs", "kind" : "val"}, {"label" : "mapK", "tail" : "(f: FunctionK[S, N])(N: Functor[N]): State[Obs, A, R, N]", "member" : "com.scalarl.State.mapK", "link" : "com\/scalarl\/state\/MapState.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N])(implicitN:cats.Functor[N]):com.scalarl.State[Obs,A,R,N]", "kind" : "def"}, {"label" : "mapReward", "tail" : "(f: (R) ⇒ T)(M: Functor[S]): State[Obs, A, T, S]", "member" : "com.scalarl.State.mapReward", "link" : "com\/scalarl\/state\/MapState.html#mapReward[T](f:R=>T)(implicitM:cats.Functor[M]):com.scalarl.State[Obs,A,T,M]", "kind" : "def"}, {"label" : "mapObservation", "tail" : "(f: (Obs) ⇒ P)(M: Functor[S]): State[P, A, R, S]", "member" : "com.scalarl.State.mapObservation", "link" : "com\/scalarl\/state\/MapState.html#mapObservation[P](f:Obs=>P)(implicitM:cats.Functor[M]):com.scalarl.State[P,A,R,M]", "kind" : "def"}, {"label" : "isTerminal", "tail" : "(): Boolean", "member" : "com.scalarl.State.isTerminal", "link" : "com\/scalarl\/state\/MapState.html#isTerminal:Boolean", "kind" : "def"}, {"label" : "act", "tail" : "(action: A): S[(R, This)]", "member" : "com.scalarl.State.act", "link" : "com\/scalarl\/state\/MapState.html#act(action:A):M[(R,State.this.This)]", "kind" : "def"}, {"label" : "actions", "tail" : "(): Set[A]", "member" : "com.scalarl.State.actions", "link" : "com\/scalarl\/state\/MapState.html#actions:Set[A]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.State.This", "link" : "com\/scalarl\/state\/MapState.html#This=com.scalarl.State[Obs,A,R,M]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/state\/MapState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/state\/MapState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/state\/MapState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/state\/MapState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/state\/MapState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/state\/MapState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/state\/MapState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/MapState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/state\/MapState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/state\/MapState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/state\/MapState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/state\/MapState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/state\/MapState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/state\/MapState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/state\/MapState.html", "kind" : "case class"}, {"name" : "com.scalarl.state.StaticMapState", "shortDescription" : "MapState that doesn't evolve.", "members_case class" : [{"label" : "invalidMove", "tail" : ": S[(R, This)]", "member" : "com.scalarl.state.StaticMapState.invalidMove", "link" : "com\/scalarl\/state\/StaticMapState.html#invalidMove:S[(R,StaticMapState.this.This)]", "kind" : "val"}, {"label" : "dynamics", "tail" : ": Map[A, S[(R, This)]]", "member" : "com.scalarl.state.StaticMapState.dynamics", "link" : "com\/scalarl\/state\/StaticMapState.html#dynamics:scala.collection.immutable.Map[A,S[(R,StaticMapState.this.This)]]", "kind" : "val"}, {"label" : "observation", "tail" : ": Unit", "member" : "com.scalarl.state.StaticMapState.observation", "link" : "com\/scalarl\/state\/StaticMapState.html#observation:Unit", "kind" : "val"}, {"member" : "com.scalarl.state.StaticMapState#<init>", "error" : "unsupported entity"}, {"label" : "penalty", "tail" : ": S[R]", "member" : "com.scalarl.state.StaticMapState.penalty", "link" : "com\/scalarl\/state\/StaticMapState.html#penalty:S[R]", "kind" : "val"}, {"label" : "rewards", "tail" : ": Map[A, S[R]]", "member" : "com.scalarl.state.StaticMapState.rewards", "link" : "com\/scalarl\/state\/StaticMapState.html#rewards:Map[A,S[R]]", "kind" : "val"}, {"label" : "mapK", "tail" : "(f: FunctionK[S, N])(N: Functor[N]): State[Unit, A, R, N]", "member" : "com.scalarl.State.mapK", "link" : "com\/scalarl\/state\/StaticMapState.html#mapK[N[_]](f:cats.arrow.FunctionK[M,N])(implicitN:cats.Functor[N]):com.scalarl.State[Obs,A,R,N]", "kind" : "def"}, {"label" : "mapReward", "tail" : "(f: (R) ⇒ T)(M: Functor[S]): State[Unit, A, T, S]", "member" : "com.scalarl.State.mapReward", "link" : "com\/scalarl\/state\/StaticMapState.html#mapReward[T](f:R=>T)(implicitM:cats.Functor[M]):com.scalarl.State[Obs,A,T,M]", "kind" : "def"}, {"label" : "mapObservation", "tail" : "(f: (Unit) ⇒ P)(M: Functor[S]): State[P, A, R, S]", "member" : "com.scalarl.State.mapObservation", "link" : "com\/scalarl\/state\/StaticMapState.html#mapObservation[P](f:Obs=>P)(implicitM:cats.Functor[M]):com.scalarl.State[P,A,R,M]", "kind" : "def"}, {"label" : "isTerminal", "tail" : "(): Boolean", "member" : "com.scalarl.State.isTerminal", "link" : "com\/scalarl\/state\/StaticMapState.html#isTerminal:Boolean", "kind" : "def"}, {"label" : "act", "tail" : "(action: A): S[(R, This)]", "member" : "com.scalarl.State.act", "link" : "com\/scalarl\/state\/StaticMapState.html#act(action:A):M[(R,State.this.This)]", "kind" : "def"}, {"label" : "actions", "tail" : "(): Set[A]", "member" : "com.scalarl.State.actions", "link" : "com\/scalarl\/state\/StaticMapState.html#actions:Set[A]", "kind" : "def"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.State.This", "link" : "com\/scalarl\/state\/StaticMapState.html#This=com.scalarl.State[Obs,A,R,M]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/state\/StaticMapState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/state\/StaticMapState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/state\/StaticMapState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/state\/StaticMapState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/state\/StaticMapState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/state\/StaticMapState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/state\/StaticMapState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/StaticMapState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/StaticMapState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/StaticMapState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/state\/StaticMapState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/state\/StaticMapState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/state\/StaticMapState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/state\/StaticMapState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/state\/StaticMapState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/state\/StaticMapState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/state\/StaticMapState.html", "kind" : "case class"}, {"name" : "com.scalarl.state.TickState", "shortDescription" : "State that ends after a certain number of interactions.", "members_case class" : [{"label" : "mapK", "tail" : "(f: FunctionK[S, N])(N: Functor[N]): State[Obs, A, R, N]", "member" : "com.scalarl.state.TickState.mapK", "link" : "com\/scalarl\/state\/TickState.html#mapK[N[_]](f:cats.arrow.FunctionK[S,N])(implicitN:cats.Functor[N]):com.scalarl.State[Obs,A,R,N]", "kind" : "def"}, {"label" : "mapReward", "tail" : "(f: (R) ⇒ T)(S: Functor[S]): State[Obs, A, T, S]", "member" : "com.scalarl.state.TickState.mapReward", "link" : "com\/scalarl\/state\/TickState.html#mapReward[T](f:R=>T)(implicitS:cats.Functor[S]):com.scalarl.State[Obs,A,T,S]", "kind" : "def"}, {"label" : "mapObservation", "tail" : "(f: (Obs) ⇒ P)(S: Functor[S]): State[P, A, R, S]", "member" : "com.scalarl.state.TickState.mapObservation", "link" : "com\/scalarl\/state\/TickState.html#mapObservation[P](f:Obs=>P)(implicitS:cats.Functor[S]):com.scalarl.State[P,A,R,S]", "kind" : "def"}, {"label" : "isTerminal", "tail" : "(): Boolean", "member" : "com.scalarl.state.TickState.isTerminal", "link" : "com\/scalarl\/state\/TickState.html#isTerminal:Boolean", "kind" : "def"}, {"label" : "act", "tail" : "(action: A): S[(R, This)]", "member" : "com.scalarl.state.TickState.act", "link" : "com\/scalarl\/state\/TickState.html#act(action:A):S[(R,TickState.this.This)]", "kind" : "def"}, {"label" : "actions", "tail" : "(): Set[A]", "member" : "com.scalarl.state.TickState.actions", "link" : "com\/scalarl\/state\/TickState.html#actions:Set[A]", "kind" : "def"}, {"label" : "invalidMove", "tail" : "(): S[(R, This)]", "member" : "com.scalarl.state.TickState.invalidMove", "link" : "com\/scalarl\/state\/TickState.html#invalidMove:S[(R,TickState.this.This)]", "kind" : "def"}, {"label" : "dynamics", "tail" : "(): Map[A, S[(R, This)]]", "member" : "com.scalarl.state.TickState.dynamics", "link" : "com\/scalarl\/state\/TickState.html#dynamics:Map[A,S[(R,TickState.this.This)]]", "kind" : "def"}, {"label" : "observation", "tail" : "(): Obs", "member" : "com.scalarl.state.TickState.observation", "link" : "com\/scalarl\/state\/TickState.html#observation:Obs", "kind" : "def"}, {"member" : "com.scalarl.state.TickState#<init>", "error" : "unsupported entity"}, {"label" : "limit", "tail" : ": Int", "member" : "com.scalarl.state.TickState.limit", "link" : "com\/scalarl\/state\/TickState.html#limit:Int", "kind" : "val"}, {"label" : "tick", "tail" : ": Int", "member" : "com.scalarl.state.TickState.tick", "link" : "com\/scalarl\/state\/TickState.html#tick:Int", "kind" : "val"}, {"label" : "state", "tail" : ": State[Obs, A, R, S]", "member" : "com.scalarl.state.TickState.state", "link" : "com\/scalarl\/state\/TickState.html#state:com.scalarl.State[Obs,A,R,S]", "kind" : "val"}, {"label" : "This", "tail" : "", "member" : "com.scalarl.State.This", "link" : "com\/scalarl\/state\/TickState.html#This=com.scalarl.State[Obs,A,R,M]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/state\/TickState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/state\/TickState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/state\/TickState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/state\/TickState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/state\/TickState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/state\/TickState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/state\/TickState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/TickState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/TickState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/state\/TickState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/state\/TickState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/state\/TickState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/state\/TickState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/state\/TickState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/state\/TickState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/state\/TickState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/state\/TickState.html", "kind" : "case class"}], "com.scalarl.book" : [{"name" : "com.scalarl.book.Chapter2", "shortDescription" : "  # Introduction to Chapter 2", "object" : "com\/scalarl\/book\/Chapter2$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.book.Chapter2.main", "link" : "com\/scalarl\/book\/Chapter2$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "play", "tail" : "(policy: Policy[Unit, Arm, Double, Cat, Generator]): List[Double]", "member" : "com.scalarl.book.Chapter2.play", "link" : "com\/scalarl\/book\/Chapter2$.html#play(policy:com.scalarl.Policy[Unit,com.scalarl.world.Bandit.Arm,Double,com.scalarl.Cat,com.stripe.rainier.core.Generator]):List[Double]", "kind" : "def"}, {"label" : "nonStationaryTestbed", "tail" : "(nArms: Int, mean: Double, stdDev: Double): Generator[State[Unit, Arm, Double, Generator]]", "member" : "com.scalarl.book.Chapter2.nonStationaryTestbed", "link" : "com\/scalarl\/book\/Chapter2$.html#nonStationaryTestbed(nArms:Int,mean:Double,stdDev:Double):com.stripe.rainier.core.Generator[com.scalarl.State[Unit,com.scalarl.world.Bandit.Arm,Double,com.stripe.rainier.core.Generator]]", "kind" : "def"}, {"label" : "nArmedTestbed", "tail" : "(nArms: Int, meanMean: Double, stdDev: Double): Generator[State[Unit, Arm, Double, Generator]]", "member" : "com.scalarl.book.Chapter2.nArmedTestbed", "link" : "com\/scalarl\/book\/Chapter2$.html#nArmedTestbed(nArms:Int,meanMean:Double,stdDev:Double):com.stripe.rainier.core.Generator[com.scalarl.State[Unit,com.scalarl.world.Bandit.Arm,Double,com.stripe.rainier.core.Generator]]", "kind" : "def"}, {"label" : "playBandit", "tail" : "(policy: Policy[Obs, A, R, Generator, Generator], stateGen: Generator[State[Obs, A, R, Generator]], nRuns: Int, timeSteps: Int)(reduce: (List[SARS[Obs, A, R, Generator]]) ⇒ R): (List[Moment[Obs, A, R, Generator]], List[R])", "member" : "com.scalarl.book.Chapter2.playBandit", "link" : "com\/scalarl\/book\/Chapter2$.html#playBandit[Obs,A,R](policy:com.scalarl.Policy[Obs,A,R,com.stripe.rainier.core.Generator,com.stripe.rainier.core.Generator],stateGen:com.stripe.rainier.core.Generator[com.scalarl.State[Obs,A,R,com.stripe.rainier.core.Generator]],nRuns:Int,timeSteps:Int)(reduce:List[com.scalarl.SARS[Obs,A,R,com.stripe.rainier.core.Generator]]=>R):(List[com.scalarl.logic.Episode.Moment[Obs,A,R,com.stripe.rainier.core.Generator]],List[R])", "kind" : "def"}, {"label" : "average", "tail" : "(s: Iterable[Double]): Double", "member" : "com.scalarl.book.Chapter2.average", "link" : "com\/scalarl\/book\/Chapter2$.html#average(s:Iterable[Double]):Double", "kind" : "def"}, {"label" : "evaluator", "tail" : ": Numeric[Real]", "member" : "com.scalarl.book.Chapter2.evaluator", "link" : "com\/scalarl\/book\/Chapter2$.html#evaluator:Numeric[com.stripe.rainier.compute.Real]", "kind" : "implicit val"}, {"label" : "rng", "tail" : ": RNG", "member" : "com.scalarl.book.Chapter2.rng", "link" : "com\/scalarl\/book\/Chapter2$.html#rng:com.stripe.rainier.sampler.RNG", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/book\/Chapter2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/book\/Chapter2$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/book\/Chapter2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/book\/Chapter2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/book\/Chapter2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/book\/Chapter2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/book\/Chapter2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/book\/Chapter2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/book\/Chapter2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/book\/Chapter2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/book\/Chapter2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/book\/Chapter2$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/book\/Chapter2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/book\/Chapter2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/book\/Chapter2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/book\/Chapter2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.book.Chapter3", "shortDescription" : "", "object" : "com\/scalarl\/book\/Chapter3$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.book.Chapter3.main", "link" : "com\/scalarl\/book\/Chapter3$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "threeFive", "tail" : "(): (StateValueFn[Position, DecayState[Double]], Long)", "member" : "com.scalarl.book.Chapter3.threeFive", "link" : "com\/scalarl\/book\/Chapter3$.html#threeFive:(com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,com.scalarl.value.DecayState[Double]],Long)", "kind" : "def"}, {"label" : "threeTwo", "tail" : "(): (StateValueFn[Position, DecayState[Double]], Long)", "member" : "com.scalarl.book.Chapter3.threeTwo", "link" : "com\/scalarl\/book\/Chapter3$.html#threeTwo:(com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,com.scalarl.value.DecayState[Double]],Long)", "kind" : "def"}, {"label" : "printFigure", "tail" : "(conf: Config, pair: (StateValueFn[Position, T], Long), title: String)(arg0: ToDouble[T]): Unit", "member" : "com.scalarl.book.Chapter3.printFigure", "link" : "com\/scalarl\/book\/Chapter3$.html#printFigure[T](conf:com.scalarl.world.GridWorld.Config,pair:(com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,T],Long),title:String)(implicitevidence$3:com.scalarl.algebra.ToDouble[T]):Unit", "kind" : "def"}, {"label" : "toTable", "tail" : "(conf: Config, f: (Position) ⇒ Double): Iterable[Iterable[Double]]", "member" : "com.scalarl.book.Chapter3.toTable", "link" : "com\/scalarl\/book\/Chapter3$.html#toTable(conf:com.scalarl.world.GridWorld.Config,f:com.scalarl.world.util.Grid.Position=>Double):Iterable[Iterable[Double]]", "kind" : "def"}, {"label" : "shouldStop", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T], iterations: Long)(arg0: ToDouble[T]): Boolean", "member" : "com.scalarl.book.Chapter3.shouldStop", "link" : "com\/scalarl\/book\/Chapter3$.html#shouldStop[Obs,T](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T],iterations:Long)(implicitevidence$2:com.scalarl.algebra.ToDouble[T]):Boolean", "kind" : "def"}, {"label" : "valueFunctionConverged", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T])(arg0: ToDouble[T]): Boolean", "member" : "com.scalarl.book.Chapter3.valueFunctionConverged", "link" : "com\/scalarl\/book\/Chapter3$.html#valueFunctionConverged[Obs,T](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T])(implicitevidence$1:com.scalarl.algebra.ToDouble[T]):Boolean", "kind" : "def"}, {"label" : "notConverging", "tail" : "(iterations: Long, allowed: Long): Boolean", "member" : "com.scalarl.book.Chapter3.notConverging", "link" : "com\/scalarl\/book\/Chapter3$.html#notConverging(iterations:Long,allowed:Long):Boolean", "kind" : "def"}, {"label" : "emptyFn", "tail" : ": StateValueFn[Position, DecayState[Double]]", "member" : "com.scalarl.book.Chapter3.emptyFn", "link" : "com\/scalarl\/book\/Chapter3$.html#emptyFn:com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,com.scalarl.value.DecayState[Double]]", "kind" : "val"}, {"label" : "gamma", "tail" : ": Double", "member" : "com.scalarl.book.Chapter3.gamma", "link" : "com\/scalarl\/book\/Chapter3$.html#gamma:Double", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "com.scalarl.book.Chapter3.epsilon", "link" : "com\/scalarl\/book\/Chapter3$.html#epsilon:Double", "kind" : "val"}, {"label" : "allowedIterations", "tail" : ": Long", "member" : "com.scalarl.book.Chapter3.allowedIterations", "link" : "com\/scalarl\/book\/Chapter3$.html#allowedIterations:Long", "kind" : "val"}, {"label" : "gridConf", "tail" : ": Config", "member" : "com.scalarl.book.Chapter3.gridConf", "link" : "com\/scalarl\/book\/Chapter3$.html#gridConf:com.scalarl.world.GridWorld.Config", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/book\/Chapter3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/book\/Chapter3$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/book\/Chapter3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/book\/Chapter3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/book\/Chapter3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/book\/Chapter3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/book\/Chapter3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/book\/Chapter3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/book\/Chapter3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/book\/Chapter3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/book\/Chapter3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/book\/Chapter3$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/book\/Chapter3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/book\/Chapter3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/book\/Chapter3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/book\/Chapter3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.book.Chapter4", "shortDescription" : "", "object" : "com\/scalarl\/book\/Chapter4$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.book.Chapter4.main", "link" : "com\/scalarl\/book\/Chapter4$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "runCarRental", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter4.runCarRental", "link" : "com\/scalarl\/book\/Chapter4$.html#runCarRental():Unit", "kind" : "def"}, {"label" : "figureFourOne", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter4.figureFourOne", "link" : "com\/scalarl\/book\/Chapter4$.html#figureFourOne():Unit", "kind" : "def"}, {"label" : "vfToSeqPoints", "tail" : "(vf: StateValueFn[InvPair, DecayState[Double]]): Seq[Seq[Double]]", "member" : "com.scalarl.book.Chapter4.vfToSeqPoints", "link" : "com\/scalarl\/book\/Chapter4$.html#vfToSeqPoints(vf:com.scalarl.StateValueFn[com.scalarl.world.CarRental.InvPair,com.scalarl.value.DecayState[Double]]):Seq[Seq[Double]]", "kind" : "def"}, {"label" : "fourTwo", "tail" : "(inPlace: Boolean): (StateValueFn[InvPair, DecayState[Double]], Config, Long)", "member" : "com.scalarl.book.Chapter4.fourTwo", "link" : "com\/scalarl\/book\/Chapter4$.html#fourTwo(inPlace:Boolean):(com.scalarl.StateValueFn[com.scalarl.world.CarRental.InvPair,com.scalarl.value.DecayState[Double]],com.scalarl.world.CarRental.Config,Long)", "kind" : "def"}, {"label" : "fourOne", "tail" : "(inPlace: Boolean): (StateValueFn[Position, DecayState[Double]], Long)", "member" : "com.scalarl.book.Chapter4.fourOne", "link" : "com\/scalarl\/book\/Chapter4$.html#fourOne(inPlace:Boolean):(com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,com.scalarl.value.DecayState[Double]],Long)", "kind" : "def"}, {"label" : "shouldStop", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T], iterations: Long, verbose: Boolean)(arg0: ToDouble[T]): Boolean", "member" : "com.scalarl.book.Chapter4.shouldStop", "link" : "com\/scalarl\/book\/Chapter4$.html#shouldStop[Obs,T](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T],iterations:Long,verbose:Boolean)(implicitevidence$1:com.scalarl.algebra.ToDouble[T]):Boolean", "kind" : "def"}, {"label" : "emptyFn", "tail" : ": StateValueFn[Position, DecayState[Double]]", "member" : "com.scalarl.book.Chapter4.emptyFn", "link" : "com\/scalarl\/book\/Chapter4$.html#emptyFn:com.scalarl.StateValueFn[com.scalarl.world.util.Grid.Position,com.scalarl.value.DecayState[Double]]", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "com.scalarl.book.Chapter4.epsilon", "link" : "com\/scalarl\/book\/Chapter4$.html#epsilon:Double", "kind" : "val"}, {"label" : "gamma", "tail" : ": Double", "member" : "com.scalarl.book.Chapter4.gamma", "link" : "com\/scalarl\/book\/Chapter4$.html#gamma:Double", "kind" : "val"}, {"label" : "allowedIterations", "tail" : ": Long", "member" : "com.scalarl.book.Chapter4.allowedIterations", "link" : "com\/scalarl\/book\/Chapter4$.html#allowedIterations:Long", "kind" : "val"}, {"label" : "gridConf", "tail" : ": Config", "member" : "com.scalarl.book.Chapter4.gridConf", "link" : "com\/scalarl\/book\/Chapter4$.html#gridConf:com.scalarl.world.GridWorld.Config", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/book\/Chapter4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/book\/Chapter4$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/book\/Chapter4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/book\/Chapter4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/book\/Chapter4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/book\/Chapter4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/book\/Chapter4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter4$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/book\/Chapter4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/book\/Chapter4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/book\/Chapter4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/book\/Chapter4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/book\/Chapter4$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/book\/Chapter4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/book\/Chapter4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/book\/Chapter4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/book\/Chapter4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.book.Chapter5", "shortDescription" : "", "object" : "com\/scalarl\/book\/Chapter5$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.book.Chapter5.main", "link" : "com\/scalarl\/book\/Chapter5$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "importanceSampling", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter5.importanceSampling", "link" : "com\/scalarl\/book\/Chapter5$.html#importanceSampling():Unit", "kind" : "def"}, {"label" : "figureFiveFour", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter5.figureFiveFour", "link" : "com\/scalarl\/book\/Chapter5$.html#figureFiveFour():Unit", "kind" : "def"}, {"label" : "figureFiveThree", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter5.figureFiveThree", "link" : "com\/scalarl\/book\/Chapter5$.html#figureFiveThree():Unit", "kind" : "def"}, {"label" : "figureFiveTwo", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter5.figureFiveTwo", "link" : "com\/scalarl\/book\/Chapter5$.html#figureFiveTwo():Unit", "kind" : "def"}, {"label" : "figureFiveOne", "tail" : "(): Unit", "member" : "com.scalarl.book.Chapter5.figureFiveOne", "link" : "com\/scalarl\/book\/Chapter5$.html#figureFiveOne():Unit", "kind" : "def"}, {"label" : "updateFn", "tail" : "(g: M[State[Obs, A, R, M]], agg: MonoidAggregator[SARS[Obs, A, R, M], G, Option[G]], policyFn: (ActionValueFn[Obs, A, G]) ⇒ Policy[Obs, A, R, M, M])(arg0: Monad[M]): Loop[M, ActionValueFn[Obs, A, G]]", "member" : "com.scalarl.book.Chapter5.updateFn", "link" : "com\/scalarl\/book\/Chapter5$.html#updateFn[Obs,A,R,G,M[_]](g:M[com.scalarl.State[Obs,A,R,M]],agg:com.twitter.algebird.MonoidAggregator[com.scalarl.SARS[Obs,A,R,M],G,Option[G]],policyFn:com.scalarl.ActionValueFn[Obs,A,G]=>com.scalarl.Policy[Obs,A,R,M,M])(implicitevidence$2:cats.Monad[M]):com.scalarl.book.Chapter5.Loop[M,com.scalarl.ActionValueFn[Obs,A,G]]", "kind" : "def"}, {"label" : "Loop", "tail" : "", "member" : "com.scalarl.book.Chapter5.Loop", "link" : "com\/scalarl\/book\/Chapter5$.html#Loop[M[_],T]=T=>M[T]", "kind" : "type"}, {"label" : "uniformStarts", "tail" : ": Generator[Blackjack[Generator]]", "member" : "com.scalarl.book.Chapter5.uniformStarts", "link" : "com\/scalarl\/book\/Chapter5$.html#uniformStarts:com.stripe.rainier.core.Generator[com.scalarl.world.Blackjack[com.stripe.rainier.core.Generator]]", "kind" : "val"}, {"label" : "limited", "tail" : ": Generator[State[AgentView, Action, Double, Generator]]", "member" : "com.scalarl.book.Chapter5.limited", "link" : "com\/scalarl\/book\/Chapter5$.html#limited:com.stripe.rainier.core.Generator[com.scalarl.State[com.scalarl.world.Blackjack.AgentView,com.scalarl.world.Blackjack.Action,Double,com.stripe.rainier.core.Generator]]", "kind" : "val"}, {"label" : "starter", "tail" : ": Generator[Blackjack[Generator]]", "member" : "com.scalarl.book.Chapter5.starter", "link" : "com\/scalarl\/book\/Chapter5$.html#starter:com.stripe.rainier.core.Generator[com.scalarl.world.Blackjack[com.stripe.rainier.core.Generator]]", "kind" : "val"}, {"label" : "limitedM", "tail" : "(state: M[Blackjack[M]])(arg0: Functor[M]): M[State[AgentView, Action, Double, M]]", "member" : "com.scalarl.book.Chapter5.limitedM", "link" : "com\/scalarl\/book\/Chapter5$.html#limitedM[M[_]](state:M[com.scalarl.world.Blackjack[M]])(implicitevidence$1:cats.Functor[M]):M[com.scalarl.State[com.scalarl.world.Blackjack.AgentView,com.scalarl.world.Blackjack.Action,Double,M]]", "kind" : "def"}, {"label" : "random", "tail" : "(): Policy[AgentView, Action, Double, Cat, M]", "member" : "com.scalarl.book.Chapter5.random", "link" : "com\/scalarl\/book\/Chapter5$.html#random[M[_]]:com.scalarl.Policy[com.scalarl.world.Blackjack.AgentView,com.scalarl.world.Blackjack.Action,Double,com.scalarl.Cat,M]", "kind" : "def"}, {"label" : "stickHighCat", "tail" : "(hitBelow: Int): Policy[AgentView, Action, Double, Cat, S]", "member" : "com.scalarl.book.Chapter5.stickHighCat", "link" : "com\/scalarl\/book\/Chapter5$.html#stickHighCat[S[_]](hitBelow:Int):com.scalarl.Policy[com.scalarl.world.Blackjack.AgentView,com.scalarl.world.Blackjack.Action,Double,com.scalarl.Cat,S]", "kind" : "def"}, {"label" : "stickHigh", "tail" : "(hitBelow: Int): Policy[AgentView, Action, Double, Id, S]", "member" : "com.scalarl.book.Chapter5.stickHigh", "link" : "com\/scalarl\/book\/Chapter5$.html#stickHigh[S[_]](hitBelow:Int):com.scalarl.Policy[com.scalarl.world.Blackjack.AgentView,com.scalarl.world.Blackjack.Action,Double,cats.Id,S]", "kind" : "def"}, {"label" : "evaluator", "tail" : ": Numeric[Real]", "member" : "com.scalarl.book.Chapter5.evaluator", "link" : "com\/scalarl\/book\/Chapter5$.html#evaluator:Numeric[com.stripe.rainier.compute.Real]", "kind" : "implicit val"}, {"label" : "rng", "tail" : ": RNG", "member" : "com.scalarl.book.Chapter5.rng", "link" : "com\/scalarl\/book\/Chapter5$.html#rng:com.stripe.rainier.sampler.RNG", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/book\/Chapter5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/book\/Chapter5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/book\/Chapter5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/book\/Chapter5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/book\/Chapter5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/book\/Chapter5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/book\/Chapter5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/book\/Chapter5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/book\/Chapter5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/book\/Chapter5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/book\/Chapter5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/book\/Chapter5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/book\/Chapter5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/book\/Chapter5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/book\/Chapter5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/book\/Chapter5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.book.Chapter6", "shortDescription" : "", "object" : "com\/scalarl\/book\/Chapter6$.html", "members_object" : [{"label" : "main", "tail" : "(items: Array[String]): Unit", "member" : "com.scalarl.book.Chapter6.main", "link" : "com\/scalarl\/book\/Chapter6$.html#main(items:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/book\/Chapter6$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/book\/Chapter6$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/book\/Chapter6$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/book\/Chapter6$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/book\/Chapter6$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/book\/Chapter6$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/book\/Chapter6$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter6$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter6$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/book\/Chapter6$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/book\/Chapter6$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/book\/Chapter6$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/book\/Chapter6$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/book\/Chapter6$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/book\/Chapter6$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/book\/Chapter6$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/book\/Chapter6$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/book\/Chapter6$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/book\/Chapter6$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.scalarl.algebra" : [{"name" : "com.scalarl.algebra.AffineCombination", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/AffineCombination.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/AffineCombination.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/AffineCombination.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/AffineCombination.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/AffineCombination.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/AffineCombination.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/AffineCombination.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/AffineCombination.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/AffineCombination.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/AffineCombination.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/AffineCombination.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/AffineCombination.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/AffineCombination.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/AffineCombination.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/AffineCombination.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/AffineCombination.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(ma: M[A])(f: (A) ⇒ R): R", "member" : "com.scalarl.algebra.AffineCombination.get", "link" : "com\/scalarl\/algebra\/AffineCombination.html#get[A](ma:M[A])(f:A=>R):R", "kind" : "abstract def"}, {"label" : "ring", "tail" : "(): Ring[R]", "member" : "com.scalarl.algebra.AffineCombination.ring", "link" : "com\/scalarl\/algebra\/AffineCombination.html#ring:com.twitter.algebird.Ring[R]", "kind" : "implicit abstract def"}], "shortDescription" : "  Another attempt at a better thing, here...", "object" : "com\/scalarl\/algebra\/AffineCombination$.html", "members_object" : [{"label" : "fromDecomposition", "tail" : "(D: Decompose[M, R]): AffineCombination[M, R]", "member" : "com.scalarl.algebra.AffineCombination.fromDecomposition", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#fromDecomposition[M[_],R](implicitD:com.scalarl.algebra.Decompose[M,R]):com.scalarl.algebra.AffineCombination[M,R]", "kind" : "implicit def"}, {"label" : "id", "tail" : "(R: Ring[R]): AffineCombination[Id, R]", "member" : "com.scalarl.algebra.AffineCombination.id", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#id[R](implicitR:com.twitter.algebird.Ring[R]):com.scalarl.algebra.AffineCombination[cats.Id,R]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(M: AffineCombination[M, R]): AffineCombination[M, R]", "member" : "com.scalarl.algebra.AffineCombination.apply", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#apply[M[_],R](implicitM:com.scalarl.algebra.AffineCombination[M,R]):com.scalarl.algebra.AffineCombination[M,R]", "kind" : "final def"}, {"label" : "take", "tail" : "(items: Iterator[(A, R)])(f: (A) ⇒ R)(arg0: Ring[R], R: Ring[R]): R", "member" : "com.scalarl.algebra.AffineCombination.take", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#take[A,R](items:Iterator[(A,R)])(f:A=>R)(implicitevidence$1:com.twitter.algebird.Ring[R],implicitR:com.twitter.algebird.Ring[R]):R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/AffineCombination$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/AffineCombination$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/algebra\/AffineCombination.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.Decompose", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Decompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Decompose.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Decompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Decompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Decompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Decompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Decompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Decompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Decompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Decompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Decompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Decompose.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Decompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Decompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Decompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Decompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decompose", "tail" : "(ma: M[A]): Iterator[(A, R)]", "member" : "com.scalarl.algebra.Decompose.decompose", "link" : "com\/scalarl\/algebra\/Decompose.html#decompose[A](ma:M[A]):Iterator[(A,R)]", "kind" : "abstract def"}, {"label" : "ring", "tail" : "(): Ring[R]", "member" : "com.scalarl.algebra.Decompose.ring", "link" : "com\/scalarl\/algebra\/Decompose.html#ring:com.twitter.algebird.Ring[R]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/scalarl\/algebra\/Decompose$.html", "members_object" : [{"label" : "categoricalDouble", "tail" : ": Decompose[Categorical, Double]", "member" : "com.scalarl.algebra.Decompose.categoricalDouble", "link" : "com\/scalarl\/algebra\/Decompose$.html#categoricalDouble:com.scalarl.algebra.Decompose[com.scalarl.rainier.Categorical,Double]", "kind" : "implicit val"}, {"label" : "rcatReal", "tail" : ": Decompose[Categorical, Real]", "member" : "com.scalarl.algebra.Decompose.rcatReal", "link" : "com\/scalarl\/algebra\/Decompose$.html#rcatReal:com.scalarl.algebra.Decompose[com.stripe.rainier.core.Categorical,com.stripe.rainier.compute.Real]", "kind" : "implicit val"}, {"label" : "rcatDouble", "tail" : "(n: Numeric[Real]): Decompose[Categorical, Double]", "member" : "com.scalarl.algebra.Decompose.rcatDouble", "link" : "com\/scalarl\/algebra\/Decompose$.html#rcatDouble(implicitn:Numeric[com.stripe.rainier.compute.Real]):com.scalarl.algebra.Decompose[com.stripe.rainier.core.Categorical,Double]", "kind" : "implicit def"}, {"label" : "id", "tail" : "(R: Ring[R]): Decompose[Id, R]", "member" : "com.scalarl.algebra.Decompose.id", "link" : "com\/scalarl\/algebra\/Decompose$.html#id[R](implicitR:com.twitter.algebird.Ring[R]):com.scalarl.algebra.Decompose[cats.Id,R]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(W: Decompose[M, R]): Decompose[M, R]", "member" : "com.scalarl.algebra.Decompose.apply", "link" : "com\/scalarl\/algebra\/Decompose$.html#apply[M[_],R](implicitW:com.scalarl.algebra.Decompose[M,R]):com.scalarl.algebra.Decompose[M,R]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Decompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Decompose$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Decompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Decompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Decompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Decompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Decompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Decompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Decompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Decompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Decompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Decompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Decompose$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Decompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Decompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Decompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Decompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/algebra\/Decompose.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.Expectation", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Expectation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Expectation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Expectation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Expectation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Expectation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Expectation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Expectation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Expectation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Expectation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Expectation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Expectation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Expectation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Expectation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Expectation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Expectation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Expectation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(a: M[A])(f: (A) ⇒ B)(M: Module[Double, B]): B", "member" : "com.scalarl.algebra.Expectation.get", "link" : "com\/scalarl\/algebra\/Expectation.html#get[A,B](a:M[A])(f:A=>B)(implicitM:com.scalarl.algebra.Module[Double,B]):B", "kind" : "abstract def"}], "shortDescription" : "  This definitely works, but I need to think through how we're going to be able  to return things like Futures, that have to communicate over the network.", "object" : "com\/scalarl\/algebra\/Expectation$.html", "members_object" : [{"label" : "id", "tail" : ": Expectation[Id]", "member" : "com.scalarl.algebra.Expectation.id", "link" : "com\/scalarl\/algebra\/Expectation$.html#id:com.scalarl.algebra.Expectation[cats.Id]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(M: Expectation[M]): Expectation[M]", "member" : "com.scalarl.algebra.Expectation.apply", "link" : "com\/scalarl\/algebra\/Expectation$.html#apply[M[_]](implicitM:com.scalarl.algebra.Expectation[M]):com.scalarl.algebra.Expectation[M]", "kind" : "final def"}, {"label" : "fromDecomposition", "tail" : "(D: Decompose[M, Double]): Expectation[M]", "member" : "com.scalarl.algebra.ExpectationImplicits.fromDecomposition", "link" : "com\/scalarl\/algebra\/Expectation$.html#fromDecomposition[M[_]](implicitD:com.scalarl.algebra.Decompose[M,Double]):com.scalarl.algebra.Expectation[M]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Expectation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Expectation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Expectation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Expectation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Expectation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Expectation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Expectation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Expectation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Expectation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Expectation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Expectation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Expectation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Expectation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Expectation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Expectation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Expectation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Expectation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/algebra\/Expectation.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.ExpectationImplicits", "members_trait" : [{"label" : "fromDecomposition", "tail" : "(D: Decompose[M, Double]): Expectation[M]", "member" : "com.scalarl.algebra.ExpectationImplicits.fromDecomposition", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#fromDecomposition[M[_]](implicitD:com.scalarl.algebra.Decompose[M,Double]):com.scalarl.algebra.Expectation[M]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/ExpectationImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/scalarl\/algebra\/ExpectationImplicits.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.Module", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Module.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Module.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Module.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Module.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Module.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Module.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Module.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Module.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Module.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Module.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Module.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Module.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Module.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Module.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Module.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Module.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scale", "tail" : "(r: R, g: G): G", "member" : "com.scalarl.algebra.Module.scale", "link" : "com\/scalarl\/algebra\/Module.html#scale(r:R,g:G):G", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): Group[G]", "member" : "com.scalarl.algebra.Module.group", "link" : "com\/scalarl\/algebra\/Module.html#group:com.twitter.algebird.Group[G]", "kind" : "implicit abstract def"}, {"label" : "ring", "tail" : "(): Ring[R]", "member" : "com.scalarl.algebra.Module.ring", "link" : "com\/scalarl\/algebra\/Module.html#ring:com.twitter.algebird.Ring[R]", "kind" : "implicit abstract def"}], "shortDescription" : "", "object" : "com\/scalarl\/algebra\/Module$.html", "members_object" : [{"label" : "fromVectorSpace", "tail" : "(R: Ring[F], V: VectorSpace[F, C]): Module[F, C[F]]", "member" : "com.scalarl.algebra.Module.fromVectorSpace", "link" : "com\/scalarl\/algebra\/Module$.html#fromVectorSpace[F,C[_]](implicitR:com.twitter.algebird.Ring[F],implicitV:com.twitter.algebird.VectorSpace[F,C]):com.scalarl.algebra.Module[F,C[F]]", "kind" : "def"}, {"label" : "from", "tail" : "(scaleFn: (R, G) ⇒ G)(R: Ring[R], G: Group[G]): Module[R, G]", "member" : "com.scalarl.algebra.Module.from", "link" : "com\/scalarl\/algebra\/Module$.html#from[R,G](scaleFn:(R,G)=>G)(implicitR:com.twitter.algebird.Ring[R],implicitG:com.twitter.algebird.Group[G]):com.scalarl.algebra.Module[R,G]", "kind" : "def"}, {"label" : "ringModule", "tail" : "(arg0: Ring[R]): Module[R, R]", "member" : "com.scalarl.algebra.Module.ringModule", "link" : "com\/scalarl\/algebra\/Module$.html#ringModule[R](implicitevidence$1:com.twitter.algebird.Ring[R]):com.scalarl.algebra.Module[R,R]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(M: Module[R, G]): Module[R, G]", "member" : "com.scalarl.algebra.Module.apply", "link" : "com\/scalarl\/algebra\/Module$.html#apply[R,G](implicitM:com.scalarl.algebra.Module[R,G]):com.scalarl.algebra.Module[R,G]", "kind" : "final def"}, {"label" : "DModule", "tail" : "", "member" : "com.scalarl.algebra.Module.DModule", "link" : "com\/scalarl\/algebra\/Module$.html#DModule[T]=com.scalarl.algebra.Module[Double,T]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Module$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Module$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Module$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Module$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Module$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Module$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Module$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Module$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Module$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Module$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Module$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Module$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Module$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Module$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Module$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Module$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Module$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/algebra\/Module.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.ToDouble", "members_trait" : [{"label" : "contramap", "tail" : "(f: (B) ⇒ A): ToDouble[B]", "member" : "com.scalarl.algebra.ToDouble.contramap", "link" : "com\/scalarl\/algebra\/ToDouble.html#contramap[B](f:B=>A):com.scalarl.algebra.ToDouble[B]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/scalarl\/algebra\/ToDouble.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/ToDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/ToDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "com\/scalarl\/algebra\/ToDouble.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "com\/scalarl\/algebra\/ToDouble.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "com\/scalarl\/algebra\/ToDouble.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/scalarl\/algebra\/ToDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/scalarl\/algebra\/ToDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Double", "member" : "com.scalarl.algebra.ToDouble.apply", "link" : "com\/scalarl\/algebra\/ToDouble.html#apply(a:A):Double", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "com\/scalarl\/algebra\/ToDouble.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "  Typeclass that encodes how some type A can be converted into a Double  instance.", "object" : "com\/scalarl\/algebra\/ToDouble$.html", "members_object" : [{"label" : "numericToDouble", "tail" : "(N: Numeric[A]): ToDouble[A]", "member" : "com.scalarl.algebra.ToDouble.numericToDouble", "link" : "com\/scalarl\/algebra\/ToDouble$.html#numericToDouble[A](implicitN:Numeric[A]):com.scalarl.algebra.ToDouble[A]", "kind" : "implicit def"}, {"label" : "fromDouble", "tail" : ": ToDouble[Double]", "member" : "com.scalarl.algebra.ToDouble.fromDouble", "link" : "com\/scalarl\/algebra\/ToDouble$.html#fromDouble:com.scalarl.algebra.ToDouble[Double]", "kind" : "implicit val"}, {"label" : "instance", "tail" : "(toDouble: (A) ⇒ Double): ToDouble[A]", "member" : "com.scalarl.algebra.ToDouble.instance", "link" : "com\/scalarl\/algebra\/ToDouble$.html#instance[A](toDouble:A=>Double):com.scalarl.algebra.ToDouble[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: ToDouble[A]): ToDouble[A]", "member" : "com.scalarl.algebra.ToDouble.apply", "link" : "com\/scalarl\/algebra\/ToDouble$.html#apply[A](implicitev:com.scalarl.algebra.ToDouble[A]):com.scalarl.algebra.ToDouble[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/ToDouble$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/ToDouble$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/ToDouble$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/ToDouble$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/ToDouble$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/ToDouble$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/ToDouble$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ToDouble$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ToDouble$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/ToDouble$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/ToDouble$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/ToDouble$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/ToDouble$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/ToDouble$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/ToDouble$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/ToDouble$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/ToDouble$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/ToDouble$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/ToDouble$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/scalarl\/algebra\/ToDouble.html", "kind" : "trait"}, {"name" : "com.scalarl.algebra.Weight", "shortDescription" : "  Value class that represents some Double-valued weight that can be applied to a  type.", "object" : "com\/scalarl\/algebra\/Weight$.html", "members_object" : [{"label" : "ord", "tail" : ": Ordering[Weight]", "member" : "com.scalarl.algebra.Weight.ord", "link" : "com\/scalarl\/algebra\/Weight$.html#ord:Ordering[com.scalarl.algebra.Weight]", "kind" : "implicit val"}, {"label" : "timesMonoid", "tail" : ": Monoid[Weight]", "member" : "com.scalarl.algebra.Weight.timesMonoid", "link" : "com\/scalarl\/algebra\/Weight$.html#timesMonoid:com.twitter.algebird.Monoid[com.scalarl.algebra.Weight]", "kind" : "implicit val"}, {"label" : "Zero", "tail" : ": Weight", "member" : "com.scalarl.algebra.Weight.Zero", "link" : "com\/scalarl\/algebra\/Weight$.html#Zero:com.scalarl.algebra.Weight", "kind" : "val"}, {"label" : "One", "tail" : ": Weight", "member" : "com.scalarl.algebra.Weight.One", "link" : "com\/scalarl\/algebra\/Weight$.html#One:com.scalarl.algebra.Weight", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/algebra\/Weight$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/algebra\/Weight$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/algebra\/Weight$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/algebra\/Weight$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/algebra\/Weight$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/algebra\/Weight$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/algebra\/Weight$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Weight$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Weight$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/algebra\/Weight$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/algebra\/Weight$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/algebra\/Weight$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/algebra\/Weight$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/algebra\/Weight$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/algebra\/Weight$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/algebra\/Weight$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/algebra\/Weight$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Weight$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Weight$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "<", "tail" : "(r: Weight): Boolean", "member" : "com.scalarl.algebra.Weight.<", "link" : "com\/scalarl\/algebra\/Weight.html#<(r:com.scalarl.algebra.Weight):Boolean", "kind" : "def"}, {"label" : "\/", "tail" : "(r: Weight): Weight", "member" : "com.scalarl.algebra.Weight.\/", "link" : "com\/scalarl\/algebra\/Weight.html#\/(r:com.scalarl.algebra.Weight):com.scalarl.algebra.Weight", "kind" : "def"}, {"label" : "*", "tail" : "(r: Weight): Weight", "member" : "com.scalarl.algebra.Weight.*", "link" : "com\/scalarl\/algebra\/Weight.html#*(r:com.scalarl.algebra.Weight):com.scalarl.algebra.Weight", "kind" : "def"}, {"label" : "+", "tail" : "(r: Weight): Weight", "member" : "com.scalarl.algebra.Weight.+", "link" : "com\/scalarl\/algebra\/Weight.html#+(r:com.scalarl.algebra.Weight):com.scalarl.algebra.Weight", "kind" : "def"}, {"member" : "com.scalarl.algebra.Weight#<init>", "error" : "unsupported entity"}, {"label" : "w", "tail" : ": Double", "member" : "com.scalarl.algebra.Weight.w", "link" : "com\/scalarl\/algebra\/Weight.html#w:Double", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/scalarl\/algebra\/Weight.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/scalarl\/algebra\/Weight.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/algebra\/Weight.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/algebra\/Weight.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/scalarl\/algebra\/Weight.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/scalarl\/algebra\/Weight.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/algebra\/Weight.html", "kind" : "case class"}], "com.scalarl.util" : [{"name" : "com.scalarl.util.FrequencyTracker", "shortDescription" : "    Aggregating thing that also keeps track of frequencies.", "object" : "com\/scalarl\/util\/FrequencyTracker$.html", "members_object" : [{"label" : "monoid", "tail" : "(f: (A) ⇒ B): Monoid[FrequencyTracker[A, B]]", "member" : "com.scalarl.util.FrequencyTracker.monoid", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#monoid[A,B](f:A=>B):com.twitter.algebird.Monoid[com.scalarl.util.FrequencyTracker[A,B]]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A, f: (A) ⇒ B): FrequencyTracker[A, B]", "member" : "com.scalarl.util.FrequencyTracker.pure", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#pure[A,B](a:A,f:A=>B):com.scalarl.util.FrequencyTracker[A,B]", "kind" : "def"}, {"label" : "empty", "tail" : "(f: (A) ⇒ B): FrequencyTracker[A, B]", "member" : "com.scalarl.util.FrequencyTracker.empty", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#empty[A,B](f:A=>B):com.scalarl.util.FrequencyTracker[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/util\/FrequencyTracker$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/util\/FrequencyTracker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "reverseIterator", "tail" : "(): Iterator[(A, Int)]", "member" : "com.scalarl.util.FrequencyTracker.reverseIterator", "link" : "com\/scalarl\/util\/FrequencyTracker.html#reverseIterator:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(A, Int)]", "member" : "com.scalarl.util.FrequencyTracker.iterator", "link" : "com\/scalarl\/util\/FrequencyTracker.html#iterator:Iterator[(A,Int)]", "kind" : "def"}, {"label" : ":+", "tail" : "(a: A): FrequencyTracker[A, B]", "member" : "com.scalarl.util.FrequencyTracker.:+", "link" : "com\/scalarl\/util\/FrequencyTracker.html#:+(a:A):com.scalarl.util.FrequencyTracker[A,B]", "kind" : "def"}, {"member" : "com.scalarl.util.FrequencyTracker#<init>", "error" : "unsupported entity"}, {"label" : "f", "tail" : ": (A) ⇒ B", "member" : "com.scalarl.util.FrequencyTracker.f", "link" : "com\/scalarl\/util\/FrequencyTracker.html#f:A=>B", "kind" : "val"}, {"label" : "frequencies", "tail" : ": Map[B, Int]", "member" : "com.scalarl.util.FrequencyTracker.frequencies", "link" : "com\/scalarl\/util\/FrequencyTracker.html#frequencies:Map[B,Int]", "kind" : "val"}, {"label" : "items", "tail" : ": Vector[(A, Int)]", "member" : "com.scalarl.util.FrequencyTracker.items", "link" : "com\/scalarl\/util\/FrequencyTracker.html#items:Vector[(A,Int)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/util\/FrequencyTracker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/util\/FrequencyTracker.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/util\/FrequencyTracker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/util\/FrequencyTracker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/util\/FrequencyTracker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/util\/FrequencyTracker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/util\/FrequencyTracker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/util\/FrequencyTracker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/util\/FrequencyTracker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/util\/FrequencyTracker.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/util\/FrequencyTracker.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/util\/FrequencyTracker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/util\/FrequencyTracker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/util\/FrequencyTracker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/scalarl\/util\/FrequencyTracker.html", "kind" : "case class"}], "com" : [], "com.scalarl.logic" : [{"name" : "com.scalarl.logic.Episode", "shortDescription" : "", "object" : "com\/scalarl\/logic\/Episode$.html", "members_object" : [{"label" : "playManyN", "tail" : "(moments: List[Moment[Obs, A, R, M]], nTimes: Int)(rewardSum: (List[SARS[Obs, A, R, M]]) ⇒ R)(arg0: Monad[M]): M[(List[Moment[Obs, A, R, M]], List[R])]", "member" : "com.scalarl.logic.Episode.playManyN", "link" : "com\/scalarl\/logic\/Episode$.html#playManyN[Obs,A,R,M[_]](moments:List[com.scalarl.logic.Episode.Moment[Obs,A,R,M]],nTimes:Int)(rewardSum:List[com.scalarl.SARS[Obs,A,R,M]]=>R)(implicitevidence$4:cats.Monad[M]):M[(List[com.scalarl.logic.Episode.Moment[Obs,A,R,M]],List[R])]", "kind" : "def"}, {"label" : "playMany", "tail" : "(moments: List[Moment[Obs, A, R, M]])(rewardSum: (List[SARS[Obs, A, R, M]]) ⇒ R)(arg0: Monad[M]): M[(List[Moment[Obs, A, R, M]], R)]", "member" : "com.scalarl.logic.Episode.playMany", "link" : "com\/scalarl\/logic\/Episode$.html#playMany[Obs,A,R,M[_]](moments:List[com.scalarl.logic.Episode.Moment[Obs,A,R,M]])(rewardSum:List[com.scalarl.SARS[Obs,A,R,M]]=>R)(implicitevidence$3:cats.Monad[M]):M[(List[com.scalarl.logic.Episode.Moment[Obs,A,R,M]],R)]", "kind" : "def"}, {"label" : "firstVisit", "tail" : "(moment: Moment[Obs, A, R, M])(arg0: Monad[M]): M[(Moment[Obs, A, R, M], Trajectory[Obs, A, R, M])]", "member" : "com.scalarl.logic.Episode.firstVisit", "link" : "com\/scalarl\/logic\/Episode$.html#firstVisit[Obs,A,R,M[_]](moment:com.scalarl.logic.Episode.Moment[Obs,A,R,M])(implicitevidence$2:cats.Monad[M]):M[(com.scalarl.logic.Episode.Moment[Obs,A,R,M],com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M])]", "kind" : "def"}, {"label" : "playEpisode", "tail" : "(moment: Moment[Obs, A, R, M], tracker: Tracker[Obs, A, R, T, M])(arg0: Monad[M]): M[(Moment[Obs, A, R, M], Trajectory[Obs, A, R, M])]", "member" : "com.scalarl.logic.Episode.playEpisode", "link" : "com\/scalarl\/logic\/Episode$.html#playEpisode[Obs,A,R,M[_],T](moment:com.scalarl.logic.Episode.Moment[Obs,A,R,M],tracker:com.scalarl.logic.MonteCarlo.Tracker[Obs,A,R,T,M])(implicitevidence$1:cats.Monad[M]):M[(com.scalarl.logic.Episode.Moment[Obs,A,R,M],com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M])]", "kind" : "def"}, {"label" : "Moment", "tail" : "", "member" : "com.scalarl.logic.Episode.Moment", "link" : "com\/scalarl\/logic\/Episode$.html#Moment[Obs,A,R,M[_]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/logic\/Episode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/logic\/Episode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/logic\/Episode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/logic\/Episode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/logic\/Episode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/logic\/Episode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/logic\/Episode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Episode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Episode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Episode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/logic\/Episode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/logic\/Episode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/logic\/Episode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/logic\/Episode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/logic\/Episode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/logic\/Episode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/logic\/Episode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/logic\/Episode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/logic\/Episode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.logic.MonteCarlo", "shortDescription" : "", "object" : "com\/scalarl\/logic\/MonteCarlo$.html", "members_object" : [{"label" : "constant", "tail" : "(): (SARS[Obs, A, R, M]) ⇒ Weight", "member" : "com.scalarl.logic.MonteCarlo.constant", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#constant[Obs,A,R,M[_]]:com.scalarl.SARS[Obs,A,R,M]=>com.scalarl.algebra.Weight", "kind" : "def"}, {"label" : "byPolicy", "tail" : "(basePolicy: Policy[Obs, A, R, Cat, M], targetPolicy: Policy[Obs, A, R, Cat, M]): (State[Obs, A, R, M], A, R) ⇒ Weight", "member" : "com.scalarl.logic.MonteCarlo.byPolicy", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#byPolicy[Obs,A,R,M[_]](basePolicy:com.scalarl.Policy[Obs,A,R,com.scalarl.Cat,M],targetPolicy:com.scalarl.Policy[Obs,A,R,com.scalarl.Cat,M]):(com.scalarl.State[Obs,A,R,M],A,R)=>com.scalarl.algebra.Weight", "kind" : "def"}, {"label" : "weighted", "tail" : "(agg: MonoidAggregator[R, G, G], fn: (SARS[Obs, A, R, M]) ⇒ Weight): MonoidAggregator[SARS[Obs, A, R, M], (G, Weight), Option[(G, Weight)]]", "member" : "com.scalarl.logic.MonteCarlo.weighted", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#weighted[Obs,A,R,G,M[_]](agg:com.twitter.algebird.MonoidAggregator[R,G,G],fn:com.scalarl.SARS[Obs,A,R,M]=>com.scalarl.algebra.Weight):com.twitter.algebird.MonoidAggregator[com.scalarl.SARS[Obs,A,R,M],(G,com.scalarl.algebra.Weight),Option[(G,com.scalarl.algebra.Weight)]]", "kind" : "def"}, {"label" : "processTrajectorySimple", "tail" : "(trajectory: Trajectory[Obs, A, R, M], valueFn: ActionValueFn[Obs, A, G], agg: MonoidAggregator[R, G, G]): ActionValueFn[Obs, A, G]", "member" : "com.scalarl.logic.MonteCarlo.processTrajectorySimple", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#processTrajectorySimple[Obs,A,R,G,M[_]](trajectory:com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M],valueFn:com.scalarl.ActionValueFn[Obs,A,G],agg:com.twitter.algebird.MonoidAggregator[R,G,G]):com.scalarl.ActionValueFn[Obs,A,G]", "kind" : "def"}, {"label" : "processTrajectory", "tail" : "(trajectory: Trajectory[Obs, A, R, M], valueFn: ActionValueFn[Obs, A, G], agg: MonoidAggregator[SARS[Obs, A, R, M], G, Option[G]]): ActionValueFn[Obs, A, G]", "member" : "com.scalarl.logic.MonteCarlo.processTrajectory", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#processTrajectory[Obs,A,R,G,M[_]](trajectory:com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M],valueFn:com.scalarl.ActionValueFn[Obs,A,G],agg:com.twitter.algebird.MonoidAggregator[com.scalarl.SARS[Obs,A,R,M],G,Option[G]]):com.scalarl.ActionValueFn[Obs,A,G]", "kind" : "def"}, {"label" : "sarsa", "tail" : "(moment: Moment[Obs, A, R, M], tracker: Tracker[Obs, A, R, T, M])(arg0: Monad[M]): M[(Moment[Obs, A, R, M], Trajectory[Obs, A, R, M])]", "member" : "com.scalarl.logic.MonteCarlo.sarsa", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#sarsa[Obs,A,R,M[_],T](moment:com.scalarl.logic.Episode.Moment[Obs,A,R,M],tracker:com.scalarl.logic.MonteCarlo.Tracker[Obs,A,R,T,M])(implicitevidence$1:cats.Monad[M]):M[(com.scalarl.logic.Episode.Moment[Obs,A,R,M],com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M])]", "kind" : "def"}, {"label" : "Tracker", "tail" : "", "member" : "com.scalarl.logic.MonteCarlo.Tracker", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#Tracker", "kind" : "object"}, {"label" : "Tracker", "tail" : "", "member" : "com.scalarl.logic.MonteCarlo.Tracker", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#Tracker[Obs,A,R,T,M[_]]=com.twitter.algebird.MonoidAggregator[com.scalarl.SARS[Obs,A,R,M],T,com.scalarl.logic.MonteCarlo.Trajectory[Obs,A,R,M]]", "kind" : "type"}, {"label" : "Trajectory", "tail" : "", "member" : "com.scalarl.logic.MonteCarlo.Trajectory", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#Trajectory[Obs,A,R,M[_]]=Iterator[(com.scalarl.SARS[Obs,A,R,M],com.scalarl.logic.MonteCarlo.ShouldUpdateState)]", "kind" : "type"}, {"label" : "ShouldUpdateState", "tail" : "", "member" : "com.scalarl.logic.MonteCarlo.ShouldUpdateState", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#ShouldUpdateState", "kind" : "object"}, {"label" : "ShouldUpdateState", "tail" : "", "member" : "com.scalarl.logic.MonteCarlo.ShouldUpdateState", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#ShouldUpdateStateextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/logic\/MonteCarlo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/logic\/MonteCarlo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.scalarl.logic.Sweep", "shortDescription" : "", "object" : "com\/scalarl\/logic\/Sweep$.html", "members_object" : [{"label" : "diffValue", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T], combine: (Double, Double) ⇒ Double)(T: ToDouble[T]): Double", "member" : "com.scalarl.logic.Sweep.diffValue", "link" : "com\/scalarl\/logic\/Sweep$.html#diffValue[Obs,T](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T],combine:(Double,Double)=>Double)(implicitT:com.scalarl.algebra.ToDouble[T]):Double", "kind" : "def"}, {"label" : "diffBelow", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T], epsilon: Double)(combine: (Double, Double) ⇒ Double)(arg0: ToDouble[T]): Boolean", "member" : "com.scalarl.logic.Sweep.diffBelow", "link" : "com\/scalarl\/logic\/Sweep$.html#diffBelow[Obs,T](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T],epsilon:Double)(combine:(Double,Double)=>Double)(implicitevidence$8:com.scalarl.algebra.ToDouble[T]):Boolean", "kind" : "def"}, {"label" : "isPolicyStable", "tail" : "(l: StateValueFn[Obs, T], r: StateValueFn[Obs, T], prepare: (R) ⇒ T, merge: (T, T) ⇒ T, states: Traversable[State[Obs, A, R, S]])(arg0: DModule[T], arg1: Ordering[T], arg2: Expectation[S]): Boolean", "member" : "com.scalarl.logic.Sweep.isPolicyStable", "link" : "com\/scalarl\/logic\/Sweep$.html#isPolicyStable[Obs,A,R,T,M[_],S[_]](l:com.scalarl.StateValueFn[Obs,T],r:com.scalarl.StateValueFn[Obs,T],prepare:R=>T,merge:(T,T)=>T,states:Traversable[com.scalarl.State[Obs,A,R,S]])(implicitevidence$5:com.scalarl.algebra.Module.DModule[T],implicitevidence$6:Ordering[T],implicitevidence$7:com.scalarl.algebra.Expectation[S]):Boolean", "kind" : "def"}, {"label" : "sweepUntil", "tail" : "(valueFn: StateValueFn[Obs, T], policyFn: (StateValueFn[Obs, T]) ⇒ Policy[Obs, A, R, M, S], evaluatorFn: (StateValueFn[Obs, T], Policy[Obs, A, R, M, S]) ⇒ StateValue[Obs, A, R, T, S], states: Traversable[State[Obs, A, R, S]], stopFn: (StateValueFn[Obs, T], StateValueFn[Obs, T], Long) ⇒ Boolean, inPlace: Boolean, valueIteration: Boolean)(arg0: Expectation[M], arg1: Expectation[S]): (StateValueFn[Obs, T], Long)", "member" : "com.scalarl.logic.Sweep.sweepUntil", "link" : "com\/scalarl\/logic\/Sweep$.html#sweepUntil[Obs,A,R,T,M[_],S[_]](valueFn:com.scalarl.StateValueFn[Obs,T],policyFn:com.scalarl.StateValueFn[Obs,T]=>com.scalarl.Policy[Obs,A,R,M,S],evaluatorFn:(com.scalarl.StateValueFn[Obs,T],com.scalarl.Policy[Obs,A,R,M,S])=>com.scalarl.evaluate.StateValue[Obs,A,R,T,S],states:Traversable[com.scalarl.State[Obs,A,R,S]],stopFn:(com.scalarl.StateValueFn[Obs,T],com.scalarl.StateValueFn[Obs,T],Long)=>Boolean,inPlace:Boolean,valueIteration:Boolean)(implicitevidence$3:com.scalarl.algebra.Expectation[M],implicitevidence$4:com.scalarl.algebra.Expectation[S]):(com.scalarl.StateValueFn[Obs,T],Long)", "kind" : "def"}, {"label" : "sweep", "tail" : "(valueFn: StateValueFn[Obs, T], policyFn: (StateValueFn[Obs, T]) ⇒ Policy[Obs, A, R, M, S], evaluatorFn: (StateValueFn[Obs, T], Policy[Obs, A, R, M, S]) ⇒ StateValue[Obs, A, R, T, S], states: Traversable[State[Obs, A, R, S]], inPlace: Boolean, valueIteration: Boolean)(arg0: Expectation[M], arg1: Expectation[S]): StateValueFn[Obs, T]", "member" : "com.scalarl.logic.Sweep.sweep", "link" : "com\/scalarl\/logic\/Sweep$.html#sweep[Obs,A,R,T,M[_],S[_]](valueFn:com.scalarl.StateValueFn[Obs,T],policyFn:com.scalarl.StateValueFn[Obs,T]=>com.scalarl.Policy[Obs,A,R,M,S],evaluatorFn:(com.scalarl.StateValueFn[Obs,T],com.scalarl.Policy[Obs,A,R,M,S])=>com.scalarl.evaluate.StateValue[Obs,A,R,T,S],states:Traversable[com.scalarl.State[Obs,A,R,S]],inPlace:Boolean,valueIteration:Boolean)(implicitevidence$1:com.scalarl.algebra.Expectation[M],implicitevidence$2:com.scalarl.algebra.Expectation[S]):com.scalarl.StateValueFn[Obs,T]", "kind" : "def"}, {"label" : "Update", "tail" : "", "member" : "com.scalarl.logic.Sweep.Update", "link" : "com\/scalarl\/logic\/Sweep$.html#Update", "kind" : "object"}, {"label" : "Update", "tail" : "", "member" : "com.scalarl.logic.Sweep.Update", "link" : "com\/scalarl\/logic\/Sweep$.html#UpdateextendsProductwithSerializable", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/scalarl\/logic\/Sweep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/scalarl\/logic\/Sweep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/scalarl\/logic\/Sweep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/scalarl\/logic\/Sweep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/scalarl\/logic\/Sweep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/scalarl\/logic\/Sweep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/scalarl\/logic\/Sweep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Sweep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Sweep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/scalarl\/logic\/Sweep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/scalarl\/logic\/Sweep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/scalarl\/logic\/Sweep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/scalarl\/logic\/Sweep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/scalarl\/logic\/Sweep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/scalarl\/logic\/Sweep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/scalarl\/logic\/Sweep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/scalarl\/logic\/Sweep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/scalarl\/logic\/Sweep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/scalarl\/logic\/Sweep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};